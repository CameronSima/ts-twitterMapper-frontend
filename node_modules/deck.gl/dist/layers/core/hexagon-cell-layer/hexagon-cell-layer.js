'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lib = require('../../../lib');

var _shaderUtils = require('../../../shader-utils');

var _luma = require('luma.gl');

var _utils = require('../../../lib/utils');

var _fp = require('../../../lib/utils/fp64');

var _hexagonCellLayerVertex = require('./hexagon-cell-layer-vertex.glsl');

var _hexagonCellLayerVertex2 = _interopRequireDefault(_hexagonCellLayerVertex);

var _hexagonCellLayerVertex3 = require('./hexagon-cell-layer-vertex-64.glsl');

var _hexagonCellLayerVertex4 = _interopRequireDefault(_hexagonCellLayerVertex3);

var _hexagonCellLayerFragment = require('./hexagon-cell-layer-fragment.glsl');

var _hexagonCellLayerFragment2 = _interopRequireDefault(_hexagonCellLayerFragment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function positionsAreEqual(v1, v2) {
  // Hex positions are expected to change entirely, not to maintain some
  // positions and change others. Right now we only check a single vertex,
  // because H3 guarantees order, but even if that wasn't true, this would only
  // return a false positive for adjacent hexagons, which is close enough for
  // our purposes.
  return v1 === v2 || v1 && v2 && v1[0][0] === v2[0][0] && v1[0][1] === v2[0][1];
}

var DEFAULT_COLOR = [255, 0, 255, 255];

var defaultProps = {
  hexagonVertices: null,
  radius: null,
  angle: null,
  coverage: 1,
  elevationScale: 1,
  extruded: true,
  fp64: false,

  getCentroid: function getCentroid(x) {
    return x.centroid;
  },
  getColor: function getColor(x) {
    return x.color;
  },
  getElevation: function getElevation(x) {
    return x.elevation;
  },

  lightSettings: {
    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],
    ambientRatio: 0.4,
    diffuseRatio: 0.6,
    specularRatio: 0.8,
    lightsStrength: [1.2, 0.0, 0.8, 0.0],
    numberOfLights: 2
  }
};

var HexagonCellLayer = function (_Layer) {
  _inherits(HexagonCellLayer, _Layer);

  function HexagonCellLayer(props) {
    _classCallCheck(this, HexagonCellLayer);

    var missingProps = false;
    if (!props.hexagonVertices && (!props.radius || !Number.isFinite(props.angle))) {
      _utils.log.once(0, 'HexagonCellLayer: Either hexagonVertices or radius and angle are ' + 'needed to calculate primitive hexagon.');
      missingProps = true;
    } else if (props.hexagonVertices && (!Array.isArray(props.hexagonVertices) || props.hexagonVertices.length < 6)) {
      _utils.log.once(0, 'HexagonCellLayer: hexagonVertices needs to be an array of 6 points');

      missingProps = true;
    }

    if (missingProps) {
      _utils.log.once(0, 'Now using 1000 meter as default radius, 0 as default angle');
      props.radius = 1000;
      props.angle = 0;
    }

    return _possibleConstructorReturn(this, (HexagonCellLayer.__proto__ || Object.getPrototypeOf(HexagonCellLayer)).call(this, props));
  }

  _createClass(HexagonCellLayer, [{
    key: 'getShaders',
    value: function getShaders() {
      return (0, _fp.enable64bitSupport)(this.props) ? {
        vs: _hexagonCellLayerVertex4.default,
        fs: _hexagonCellLayerFragment2.default,
        modules: ['fp64', 'project64', 'lighting'],
        shaderCache: this.context.shaderCache
      } : {
        vs: _hexagonCellLayerVertex2.default,
        fs: _hexagonCellLayerFragment2.default,
        modules: ['lighting'],
        shaderCache: this.context.shaderCache
      };
    }

    /**
     * DeckGL calls initializeState when GL context is available
     * Essentially a deferred constructor
     */

  }, {
    key: 'initializeState',
    value: function initializeState() {
      var gl = this.context.gl;

      this.setState({ model: this._getModel(gl) });
      var attributeManager = this.state.attributeManager;
      /* eslint-disable max-len */

      attributeManager.addInstanced({
        instancePositions: { size: 3, accessor: ['getCentroid', 'getElevation'],
          update: this.calculateInstancePositions },
        instanceColors: { size: 4, type: _luma.GL.UNSIGNED_BYTE, accessor: 'getColor',
          update: this.calculateInstanceColors }
      });
      /* eslint-enable max-len */

      this.updateRadiusAngle();
    }
  }, {
    key: 'updateAttribute',
    value: function updateAttribute(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          changeFlags = _ref.changeFlags;

      if (props.fp64 !== oldProps.fp64) {
        var attributeManager = this.state.attributeManager;

        attributeManager.invalidateAll();

        if (props.fp64 && props.projectionMode === _lib.COORDINATE_SYSTEM.LNGLAT) {
          attributeManager.addInstanced({
            instancePositions64xyLow: {
              size: 2,
              accessor: 'getCentroid',
              update: this.calculateInstancePositions64xyLow
            }
          });
        } else {
          attributeManager.remove(['instancePositions64xyLow']);
        }
      }
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref2) {
      var props = _ref2.props,
          oldProps = _ref2.oldProps,
          changeFlags = _ref2.changeFlags;

      _get(HexagonCellLayer.prototype.__proto__ || Object.getPrototypeOf(HexagonCellLayer.prototype), 'updateState', this).call(this, { props: props, oldProps: oldProps, changeFlags: changeFlags });
      if (props.fp64 !== oldProps.fp64) {
        var gl = this.context.gl;

        this.setState({ model: this._getModel(gl) });
      }
      this.updateAttribute({ props: props, oldProps: oldProps, changeFlags: changeFlags });

      var viewportChanged = changeFlags.viewportChanged;
      var model = this.state.model;

      // Update the positions in the model if they've changes

      var verticesChanged = !positionsAreEqual(oldProps.hexagonVertices, props.hexagonVertices);

      if (model && (verticesChanged || viewportChanged)) {
        this.updateRadiusAngle();
      }
      this.updateUniforms();
    }
  }, {
    key: 'updateRadiusAngle',
    value: function updateRadiusAngle() {
      var angle = void 0;
      var radius = void 0;
      var hexagonVertices = this.props.hexagonVertices;


      if (Array.isArray(hexagonVertices) && hexagonVertices.length >= 6) {

        // calculate angle and vertices from hexagonVertices if provided
        var vertices = this.props.hexagonVertices;

        var vertex0 = vertices[0];
        var vertex3 = vertices[3];

        // transform to space coordinates
        var spaceCoord0 = this.projectFlat(vertex0);
        var spaceCoord3 = this.projectFlat(vertex3);

        // distance between two close centroids
        var dx = spaceCoord0[0] - spaceCoord3[0];
        var dy = spaceCoord0[1] - spaceCoord3[1];
        var dxy = Math.sqrt(dx * dx + dy * dy);

        // Calculate angle that the perpendicular hexagon vertex axis is tilted
        angle = Math.acos(dx / dxy) * -Math.sign(dy) + Math.PI / 2;
        radius = dxy / 2;
      } else if (this.props.radius && Number.isFinite(this.props.angle)) {

        // if no hexagonVertices provided, try use radius & angle
        var viewport = this.context.viewport;

        var _viewport$getDistance = viewport.getDistanceScales(),
            pixelsPerMeter = _viewport$getDistance.pixelsPerMeter;

        angle = this.props.angle;
        radius = this.props.radius * pixelsPerMeter[0];
      }

      this.setUniforms({
        angle: angle,
        radius: radius
      });
    }
  }, {
    key: 'getCylinderGeometry',
    value: function getCylinderGeometry(radius) {
      return new _luma.CylinderGeometry({
        radius: radius,
        topRadius: radius,
        bottomRadius: radius,
        topCap: true,
        bottomCap: true,
        height: 1,
        nradial: 6,
        nvertical: 1
      });
    }
  }, {
    key: 'updateUniforms',
    value: function updateUniforms() {
      var _props = this.props,
          opacity = _props.opacity,
          elevationScale = _props.elevationScale,
          extruded = _props.extruded,
          coverage = _props.coverage,
          lightSettings = _props.lightSettings;


      this.setUniforms(Object.assign({}, {
        extruded: extruded,
        opacity: opacity,
        coverage: coverage,
        elevationScale: elevationScale
      }, lightSettings));
    }
  }, {
    key: '_getModel',
    value: function _getModel(gl) {
      var shaders = (0, _shaderUtils.assembleShaders)(gl, this.getShaders());
      return new _luma.Model({
        gl: gl,
        id: this.props.id,
        vs: shaders.vs,
        fs: shaders.fs,
        geometry: this.getCylinderGeometry(1),
        isInstanced: true
      });
    }
  }, {
    key: 'draw',
    value: function draw(_ref3) {
      var uniforms = _ref3.uniforms;

      _get(HexagonCellLayer.prototype.__proto__ || Object.getPrototypeOf(HexagonCellLayer.prototype), 'draw', this).call(this, { uniforms: Object.assign({}, uniforms) });
    }
  }, {
    key: 'calculateInstancePositions',
    value: function calculateInstancePositions(attribute) {
      var _props2 = this.props,
          data = _props2.data,
          getCentroid = _props2.getCentroid,
          getElevation = _props2.getElevation;
      var value = attribute.value,
          size = attribute.size;

      var i = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var object = _step.value;

          var _getCentroid = getCentroid(object),
              _getCentroid2 = _slicedToArray(_getCentroid, 2),
              lon = _getCentroid2[0],
              lat = _getCentroid2[1];

          var elevation = getElevation(object);
          value[i + 0] = lon;
          value[i + 1] = lat;
          value[i + 2] = elevation || 0;
          i += size;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'calculateInstancePositions64xyLow',
    value: function calculateInstancePositions64xyLow(attribute) {
      var _props3 = this.props,
          data = _props3.data,
          getCentroid = _props3.getCentroid;
      var value = attribute.value;

      var i = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var object = _step2.value;

          var position = getCentroid(object);
          value[i++] = (0, _fp.fp64ify)(position[0])[1];
          value[i++] = (0, _fp.fp64ify)(position[1])[1];
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'calculateInstanceColors',
    value: function calculateInstanceColors(attribute) {
      var _props4 = this.props,
          data = _props4.data,
          getColor = _props4.getColor;
      var value = attribute.value,
          size = attribute.size;

      var i = 0;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = data[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var object = _step3.value;

          var color = getColor(object) || DEFAULT_COLOR;

          value[i + 0] = color[0];
          value[i + 1] = color[1];
          value[i + 2] = color[2];
          value[i + 3] = Number.isFinite(color[3]) ? color[3] : DEFAULT_COLOR[3];
          i += size;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }]);

  return HexagonCellLayer;
}(_lib.Layer);

exports.default = HexagonCellLayer;


HexagonCellLayer.layerName = 'HexagonCellLayer';
HexagonCellLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9oZXhhZ29uLWNlbGwtbGF5ZXIvaGV4YWdvbi1jZWxsLWxheWVyLmpzIl0sIm5hbWVzIjpbInBvc2l0aW9uc0FyZUVxdWFsIiwidjEiLCJ2MiIsIkRFRkFVTFRfQ09MT1IiLCJkZWZhdWx0UHJvcHMiLCJoZXhhZ29uVmVydGljZXMiLCJyYWRpdXMiLCJhbmdsZSIsImNvdmVyYWdlIiwiZWxldmF0aW9uU2NhbGUiLCJleHRydWRlZCIsImZwNjQiLCJnZXRDZW50cm9pZCIsIngiLCJjZW50cm9pZCIsImdldENvbG9yIiwiY29sb3IiLCJnZXRFbGV2YXRpb24iLCJlbGV2YXRpb24iLCJsaWdodFNldHRpbmdzIiwibGlnaHRzUG9zaXRpb24iLCJhbWJpZW50UmF0aW8iLCJkaWZmdXNlUmF0aW8iLCJzcGVjdWxhclJhdGlvIiwibGlnaHRzU3RyZW5ndGgiLCJudW1iZXJPZkxpZ2h0cyIsIkhleGFnb25DZWxsTGF5ZXIiLCJwcm9wcyIsIm1pc3NpbmdQcm9wcyIsIk51bWJlciIsImlzRmluaXRlIiwib25jZSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsInZzIiwiZnMiLCJtb2R1bGVzIiwic2hhZGVyQ2FjaGUiLCJjb250ZXh0IiwiZ2wiLCJzZXRTdGF0ZSIsIm1vZGVsIiwiX2dldE1vZGVsIiwiYXR0cmlidXRlTWFuYWdlciIsInN0YXRlIiwiYWRkSW5zdGFuY2VkIiwiaW5zdGFuY2VQb3NpdGlvbnMiLCJzaXplIiwiYWNjZXNzb3IiLCJ1cGRhdGUiLCJjYWxjdWxhdGVJbnN0YW5jZVBvc2l0aW9ucyIsImluc3RhbmNlQ29sb3JzIiwidHlwZSIsIlVOU0lHTkVEX0JZVEUiLCJjYWxjdWxhdGVJbnN0YW5jZUNvbG9ycyIsInVwZGF0ZVJhZGl1c0FuZ2xlIiwib2xkUHJvcHMiLCJjaGFuZ2VGbGFncyIsImludmFsaWRhdGVBbGwiLCJwcm9qZWN0aW9uTW9kZSIsIkxOR0xBVCIsImluc3RhbmNlUG9zaXRpb25zNjR4eUxvdyIsImNhbGN1bGF0ZUluc3RhbmNlUG9zaXRpb25zNjR4eUxvdyIsInJlbW92ZSIsInVwZGF0ZUF0dHJpYnV0ZSIsInZpZXdwb3J0Q2hhbmdlZCIsInZlcnRpY2VzQ2hhbmdlZCIsInVwZGF0ZVVuaWZvcm1zIiwidmVydGljZXMiLCJ2ZXJ0ZXgwIiwidmVydGV4MyIsInNwYWNlQ29vcmQwIiwicHJvamVjdEZsYXQiLCJzcGFjZUNvb3JkMyIsImR4IiwiZHkiLCJkeHkiLCJNYXRoIiwic3FydCIsImFjb3MiLCJzaWduIiwiUEkiLCJ2aWV3cG9ydCIsImdldERpc3RhbmNlU2NhbGVzIiwicGl4ZWxzUGVyTWV0ZXIiLCJzZXRVbmlmb3JtcyIsInRvcFJhZGl1cyIsImJvdHRvbVJhZGl1cyIsInRvcENhcCIsImJvdHRvbUNhcCIsImhlaWdodCIsIm5yYWRpYWwiLCJudmVydGljYWwiLCJvcGFjaXR5IiwiT2JqZWN0IiwiYXNzaWduIiwic2hhZGVycyIsImdldFNoYWRlcnMiLCJpZCIsImdlb21ldHJ5IiwiZ2V0Q3lsaW5kZXJHZW9tZXRyeSIsImlzSW5zdGFuY2VkIiwidW5pZm9ybXMiLCJhdHRyaWJ1dGUiLCJkYXRhIiwidmFsdWUiLCJpIiwib2JqZWN0IiwibG9uIiwibGF0IiwicG9zaXRpb24iLCJsYXllck5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7K2VBN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQWFBLFNBQVNBLGlCQUFULENBQTJCQyxFQUEzQixFQUErQkMsRUFBL0IsRUFBbUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU9ELE9BQU9DLEVBQVAsSUFDTEQsTUFBTUMsRUFBTixJQUFZRCxHQUFHLENBQUgsRUFBTSxDQUFO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QUQwQjtBQUFBLFVBQ3BCMUYsUUFEb0IsV0FDcEJBLFFBRG9CO0FBQUEsVUFFMUIyRixLQUYwQixHQUVYRixTQUZXLENBRTFCRSxLQUYwQjtBQUFBLFVBRW5CMUQsSUFGbUIsR0FFWHdELFNBRlcsQ0FFbkJ4RCxJQUZtQjs7QUFHakMsVUFBSTJELElBQUksQ0FBUjtBQUhpQztBQUFBO0FBQUE7O0FBQUE7QUFJakMsOEJBQXFCRixJQUFyQixtSUFBMkI7QUFBQSxjQUFoQkcsTUFBZ0I7O0FBQ3pCLGNBQU01RixRQUFRRCxTQUFTNkYsTUFBVCxLQUFvQnpHLGFBQWxDOztBQUVBdUcsZ0JBQU1DLElBQUksQ0FBVixJQUFlM0YsTUFBTSxDQUFOLENBQWY7QUFDQTBGLGdCQUFNQyxJQUFJLENBQVYsSUFBZTNGLE1BQU0sQ0FBTixDQUFmO0FBQ0EwRixnQkFBTUMsSUFBSSxDQUFWLElBQWUzRixNQUFNLENBQU4sQ0FBZjtBQUNBMEYsZ0JBQU1DLElBQUksQ0FBVixJQUFlOUUsT0FBT0MsUUFBUCxDQUFnQmQsTUFBTSxDQUFOLENBQWhCLElBQTRCQSxNQUFNLENBQU4sQ0FBNUIsR0FBdUNiLGNBQWMsQ0FBZCxDQUF0RDtBQUNBd0csZUFBSzNELElBQUw7QUFDRDtBQVpnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBYWxDOzs7Ozs7a0JBL05rQnRCLGdCOzs7QUFrT3JCQSxpQkFBaUJzRixTQUFqQixHQUE2QixrQkFBN0I7QUFDQXRGLGlCQUFpQnRCLFlBQWpCLEdBQWdDQSxZQUFoQyIsImZpbGUiOiJoZXhhZ29uLWNlbGwtbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtMYXllcn0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCB7YXNzZW1ibGVTaGFkZXJzfSBmcm9tICcuLi8uLi8uLi9zaGFkZXItdXRpbHMnO1xuaW1wb3J0IHtHTCwgTW9kZWwsIEN5bGluZGVyR2VvbWV0cnl9IGZyb20gJ2x1bWEuZ2wnO1xuaW1wb3J0IHtsb2d9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQge2ZwNjRpZnksIGVuYWJsZTY0Yml0U3VwcG9ydH0gZnJvbSAnLi4vLi4vLi4vbGliL3V0aWxzL2ZwNjQnO1xuaW1wb3J0IHtDT09SRElOQVRFX1NZU1RFTX0gZnJvbSAnLi4vLi4vLi4vbGliJztcblxuaW1wb3J0IGhleENlbGxWZXJ0ZXggZnJvbSAnLi9oZXhhZ29uLWNlbGwtbGF5ZXItdmVydGV4Lmdsc2wnO1xuaW1wb3J0IGhleENlbGxWZXJ0ZXg2NCBmcm9tICcuL2hleGFnb24tY2VsbC1sYXllci12ZXJ0ZXgtNjQuZ2xzbCc7XG5pbXBvcnQgaGV4Q2VsbEZyYWdtZW50IGZyb20gJy4vaGV4YWdvbi1jZWxsLWxheWVyLWZyYWdtZW50Lmdsc2wnO1xuXG5mdW5jdGlvbiBwb3NpdGlvbnNBcmVFcXVhbCh2MSwgdjIpIHtcbiAgLy8gSGV4IHBvc2l0aW9ucyBhcmUgZXhwZWN0ZWQgdG8gY2hhbmdlIGVudGlyZWx5LCBub3QgdG8gbWFpbnRhaW4gc29tZVxuICAvLyBwb3NpdGlvbnMgYW5kIGNoYW5nZSBvdGhlcnMuIFJpZ2h0IG5vdyB3ZSBvbmx5IGNoZWNrIGEgc2luZ2xlIHZlcnRleCxcbiAgLy8gYmVjYXVzZSBIMyBndWFyYW50ZWVzIG9yZGVyLCBidXQgZXZlbiBpZiB0aGF0IHdhc24ndCB0cnVlLCB0aGlzIHdvdWxkIG9ubHlcbiAgLy8gcmV0dXJuIGEgZmFsc2UgcG9zaXRpdmUgZm9yIGFkamFjZW50IGhleGFnb25zLCB3aGljaCBpcyBjbG9zZSBlbm91Z2ggZm9yXG4gIC8vIG91ciBwdXJwb3Nlcy5cbiAgcmV0dXJuIHYxID09PSB2MiB8fCAoXG4gICAgdjEgJiYgdjIgJiYgdjFbMF1bMF0gPT09IHYyWzBdWzBdICYmIHYxWzBdWzFdID09PSB2MlswXVsxXVxuICApO1xufVxuXG5jb25zdCBERUZBVUxUX0NPTE9SID0gWzI1NSwgMCwgMjU1LCAyNTVdO1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIGhleGFnb25WZXJ0aWNlczogbnVsbCxcbiAgcmFkaXVzOiBudWxsLFxuICBhbmdsZTogbnVsbCxcbiAgY292ZXJhZ2U6IDEsXG4gIGVsZXZhdGlvblNjYWxlOiAxLFxuICBleHRydWRlZDogdHJ1ZSxcbiAgZnA2NDogZmFsc2UsXG5cbiAgZ2V0Q2VudHJvaWQ6IHggPT4geC5jZW50cm9pZCxcbiAgZ2V0Q29sb3I6IHggPT4geC5jb2xvcixcbiAgZ2V0RWxldmF0aW9uOiB4ID0+IHguZWxldmF0aW9uLFxuXG4gIGxpZ2h0U2V0dGluZ3M6IHtcbiAgICBsaWdodHNQb3NpdGlvbjogWy0xMjIuNDUsIDM3Ljc1LCA4MDAwLCAtMTIyLjAsIDM4LjAwLCA1MDAwXSxcbiAgICBhbWJpZW50UmF0aW86IDAuNCxcbiAgICBkaWZmdXNlUmF0aW86IDAuNixcbiAgICBzcGVjdWxhclJhdGlvOiAwLjgsXG4gICAgbGlnaHRzU3RyZW5ndGg6IFsxLjIsIDAuMCwgMC44LCAwLjBdLFxuICAgIG51bWJlck9mTGlnaHRzOiAyXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhleGFnb25DZWxsTGF5ZXIgZXh0ZW5kcyBMYXllciB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBsZXQgbWlzc2luZ1Byb3BzID0gZmFsc2U7XG4gICAgaWYgKCFwcm9wcy5oZXhhZ29uVmVydGljZXMgJiYgKCFwcm9wcy5yYWRpdXMgfHwgIU51bWJlci5pc0Zpbml0ZShwcm9wcy5hbmdsZSkpKSB7XG4gICAgICBsb2cub25jZSgwLCAnSGV4YWdvbkNlbGxMYXllcjogRWl0aGVyIGhleGFnb25WZXJ0aWNlcyBvciByYWRpdXMgYW5kIGFuZ2xlIGFyZSAnICtcbiAgICAgICAgJ25lZWRlZCB0byBjYWxjdWxhdGUgcHJpbWl0aXZlIGhleGFnb24uJyk7XG4gICAgICBtaXNzaW5nUHJvcHMgPSB0cnVlO1xuXG4gICAgfSBlbHNlIGlmIChwcm9wcy5oZXhhZ29uVmVydGljZXMgJiYgKCFBcnJheS5pc0FycmF5KHByb3BzLmhleGFnb25WZXJ0aWNlcykgfHxcbiAgICAgIHByb3BzLmhleGFnb25WZXJ0aWNlcy5sZW5ndGggPCA2KSkge1xuICAgICAgbG9nLm9uY2UoMCwgJ0hleGFnb25DZWxsTGF5ZXI6IGhleGFnb25WZXJ0aWNlcyBuZWVkcyB0byBiZSBhbiBhcnJheSBvZiA2IHBvaW50cycpO1xuXG4gICAgICBtaXNzaW5nUHJvcHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtaXNzaW5nUHJvcHMpIHtcbiAgICAgIGxvZy5vbmNlKDAsICdOb3cgdXNpbmcgMTAwMCBtZXRlciBhcyBkZWZhdWx0IHJhZGl1cywgMCBhcyBkZWZhdWx0IGFuZ2xlJyk7XG4gICAgICBwcm9wcy5yYWRpdXMgPSAxMDAwO1xuICAgICAgcHJvcHMuYW5nbGUgPSAwO1xuICAgIH1cblxuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIGdldFNoYWRlcnMoKSB7XG4gICAgcmV0dXJuIGVuYWJsZTY0Yml0U3VwcG9ydCh0aGlzLnByb3BzKSA/IHtcbiAgICAgIHZzOiBoZXhDZWxsVmVydGV4NjQsXG4gICAgICBmczogaGV4Q2VsbEZyYWdtZW50LFxuICAgICAgbW9kdWxlczogWydmcDY0JywgJ3Byb2plY3Q2NCcsICdsaWdodGluZyddLFxuICAgICAgc2hhZGVyQ2FjaGU6IHRoaXMuY29udGV4dC5zaGFkZXJDYWNoZVxuICAgIH0gOiB7XG4gICAgICB2czogaGV4Q2VsbFZlcnRleCxcbiAgICAgIGZzOiBoZXhDZWxsRnJhZ21lbnQsXG4gICAgICBtb2R1bGVzOiBbJ2xpZ2h0aW5nJ10sXG4gICAgICBzaGFkZXJDYWNoZTogdGhpcy5jb250ZXh0LnNoYWRlckNhY2hlXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNrR0wgY2FsbHMgaW5pdGlhbGl6ZVN0YXRlIHdoZW4gR0wgY29udGV4dCBpcyBhdmFpbGFibGVcbiAgICogRXNzZW50aWFsbHkgYSBkZWZlcnJlZCBjb25zdHJ1Y3RvclxuICAgKi9cbiAgaW5pdGlhbGl6ZVN0YXRlKCkge1xuICAgIGNvbnN0IHtnbH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgdGhpcy5zZXRTdGF0ZSh7bW9kZWw6IHRoaXMuX2dldE1vZGVsKGdsKX0pO1xuICAgIGNvbnN0IHthdHRyaWJ1dGVNYW5hZ2VyfSA9IHRoaXMuc3RhdGU7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgIGF0dHJpYnV0ZU1hbmFnZXIuYWRkSW5zdGFuY2VkKHtcbiAgICAgIGluc3RhbmNlUG9zaXRpb25zOiB7c2l6ZTogMywgYWNjZXNzb3I6IFsnZ2V0Q2VudHJvaWQnLCAnZ2V0RWxldmF0aW9uJ10sXG4gICAgICAgIHVwZGF0ZTogdGhpcy5jYWxjdWxhdGVJbnN0YW5jZVBvc2l0aW9uc30sXG4gICAgICBpbnN0YW5jZUNvbG9yczoge3NpemU6IDQsIHR5cGU6IEdMLlVOU0lHTkVEX0JZVEUsIGFjY2Vzc29yOiAnZ2V0Q29sb3InLFxuICAgICAgICB1cGRhdGU6IHRoaXMuY2FsY3VsYXRlSW5zdGFuY2VDb2xvcnN9XG4gICAgfSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbiAgICB0aGlzLnVwZGF0ZVJhZGl1c0FuZ2xlKCk7XG4gIH1cblxuICB1cGRhdGVBdHRyaWJ1dGUoe3Byb3BzLCBvbGRQcm9wcywgY2hhbmdlRmxhZ3N9KSB7XG4gICAgaWYgKHByb3BzLmZwNjQgIT09IG9sZFByb3BzLmZwNjQpIHtcbiAgICAgIGNvbnN0IHthdHRyaWJ1dGVNYW5hZ2VyfSA9IHRoaXMuc3RhdGU7XG4gICAgICBhdHRyaWJ1dGVNYW5hZ2VyLmludmFsaWRhdGVBbGwoKTtcblxuICAgICAgaWYgKHByb3BzLmZwNjQgJiYgcHJvcHMucHJvamVjdGlvbk1vZGUgPT09IENPT1JESU5BVEVfU1lTVEVNLkxOR0xBVCkge1xuICAgICAgICBhdHRyaWJ1dGVNYW5hZ2VyLmFkZEluc3RhbmNlZCh7XG4gICAgICAgICAgaW5zdGFuY2VQb3NpdGlvbnM2NHh5TG93OiB7XG4gICAgICAgICAgICBzaXplOiAyLFxuICAgICAgICAgICAgYWNjZXNzb3I6ICdnZXRDZW50cm9pZCcsXG4gICAgICAgICAgICB1cGRhdGU6IHRoaXMuY2FsY3VsYXRlSW5zdGFuY2VQb3NpdGlvbnM2NHh5TG93XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJpYnV0ZU1hbmFnZXIucmVtb3ZlKFtcbiAgICAgICAgICAnaW5zdGFuY2VQb3NpdGlvbnM2NHh5TG93J1xuICAgICAgICBdKTtcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKHtwcm9wcywgb2xkUHJvcHMsIGNoYW5nZUZsYWdzfSkge1xuICAgIHN1cGVyLnVwZGF0ZVN0YXRlKHtwcm9wcywgb2xkUHJvcHMsIGNoYW5nZUZsYWdzfSk7XG4gICAgaWYgKHByb3BzLmZwNjQgIT09IG9sZFByb3BzLmZwNjQpIHtcbiAgICAgIGNvbnN0IHtnbH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICB0aGlzLnNldFN0YXRlKHttb2RlbDogdGhpcy5fZ2V0TW9kZWwoZ2wpfSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQXR0cmlidXRlKHtwcm9wcywgb2xkUHJvcHMsIGNoYW5nZUZsYWdzfSk7XG5cbiAgICBjb25zdCB2aWV3cG9ydENoYW5nZWQgPSBjaGFuZ2VGbGFncy52aWV3cG9ydENoYW5nZWQ7XG4gICAgY29uc3Qge21vZGVsfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHBvc2l0aW9ucyBpbiB0aGUgbW9kZWwgaWYgdGhleSd2ZSBjaGFuZ2VzXG4gICAgY29uc3QgdmVydGljZXNDaGFuZ2VkID1cbiAgICAgICFwb3NpdGlvbnNBcmVFcXVhbChvbGRQcm9wcy5oZXhhZ29uVmVydGljZXMsIHByb3BzLmhleGFnb25WZXJ0aWNlcyk7XG5cbiAgICBpZiAobW9kZWwgJiYgKHZlcnRpY2VzQ2hhbmdlZCB8fCB2aWV3cG9ydENoYW5nZWQpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVJhZGl1c0FuZ2xlKCk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlVW5pZm9ybXMoKTtcbiAgfVxuXG4gIHVwZGF0ZVJhZGl1c0FuZ2xlKCkge1xuICAgIGxldCBhbmdsZTtcbiAgICBsZXQgcmFkaXVzO1xuICAgIGNvbnN0IHtoZXhhZ29uVmVydGljZXN9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGhleGFnb25WZXJ0aWNlcykgJiYgaGV4YWdvblZlcnRpY2VzLmxlbmd0aCA+PSA2KSB7XG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBhbmdsZSBhbmQgdmVydGljZXMgZnJvbSBoZXhhZ29uVmVydGljZXMgaWYgcHJvdmlkZWRcbiAgICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy5wcm9wcy5oZXhhZ29uVmVydGljZXM7XG5cbiAgICAgIGNvbnN0IHZlcnRleDAgPSB2ZXJ0aWNlc1swXTtcbiAgICAgIGNvbnN0IHZlcnRleDMgPSB2ZXJ0aWNlc1szXTtcblxuICAgICAgLy8gdHJhbnNmb3JtIHRvIHNwYWNlIGNvb3JkaW5hdGVzXG4gICAgICBjb25zdCBzcGFjZUNvb3JkMCA9IHRoaXMucHJvamVjdEZsYXQodmVydGV4MCk7XG4gICAgICBjb25zdCBzcGFjZUNvb3JkMyA9IHRoaXMucHJvamVjdEZsYXQodmVydGV4Myk7XG5cbiAgICAgIC8vIGRpc3RhbmNlIGJldHdlZW4gdHdvIGNsb3NlIGNlbnRyb2lkc1xuICAgICAgY29uc3QgZHggPSBzcGFjZUNvb3JkMFswXSAtIHNwYWNlQ29vcmQzWzBdO1xuICAgICAgY29uc3QgZHkgPSBzcGFjZUNvb3JkMFsxXSAtIHNwYWNlQ29vcmQzWzFdO1xuICAgICAgY29uc3QgZHh5ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGFuZ2xlIHRoYXQgdGhlIHBlcnBlbmRpY3VsYXIgaGV4YWdvbiB2ZXJ0ZXggYXhpcyBpcyB0aWx0ZWRcbiAgICAgIGFuZ2xlID0gTWF0aC5hY29zKGR4IC8gZHh5KSAqIC1NYXRoLnNpZ24oZHkpICsgTWF0aC5QSSAvIDI7XG4gICAgICByYWRpdXMgPSBkeHkgLyAyO1xuXG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnJhZGl1cyAmJiBOdW1iZXIuaXNGaW5pdGUodGhpcy5wcm9wcy5hbmdsZSkpIHtcblxuICAgICAgLy8gaWYgbm8gaGV4YWdvblZlcnRpY2VzIHByb3ZpZGVkLCB0cnkgdXNlIHJhZGl1cyAmIGFuZ2xlXG4gICAgICBjb25zdCB7dmlld3BvcnR9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgY29uc3Qge3BpeGVsc1Blck1ldGVyfSA9IHZpZXdwb3J0LmdldERpc3RhbmNlU2NhbGVzKCk7XG5cbiAgICAgIGFuZ2xlID0gdGhpcy5wcm9wcy5hbmdsZTtcbiAgICAgIHJhZGl1cyA9IHRoaXMucHJvcHMucmFkaXVzICogcGl4ZWxzUGVyTWV0ZXJbMF07XG4gICAgfVxuXG4gICAgdGhpcy5zZXRVbmlmb3Jtcyh7XG4gICAgICBhbmdsZSxcbiAgICAgIHJhZGl1c1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q3lsaW5kZXJHZW9tZXRyeShyYWRpdXMpIHtcbiAgICByZXR1cm4gbmV3IEN5bGluZGVyR2VvbWV0cnkoe1xuICAgICAgcmFkaXVzLFxuICAgICAgdG9wUmFkaXVzOiByYWRpdXMsXG4gICAgICBib3R0b21SYWRpdXM6IHJhZGl1cyxcbiAgICAgIHRvcENhcDogdHJ1ZSxcbiAgICAgIGJvdHRvbUNhcDogdHJ1ZSxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG5yYWRpYWw6IDYsXG4gICAgICBudmVydGljYWw6IDFcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVVuaWZvcm1zKCkge1xuICAgIGNvbnN0IHtvcGFjaXR5LCBlbGV2YXRpb25TY2FsZSwgZXh0cnVkZWQsIGNvdmVyYWdlLCBsaWdodFNldHRpbmdzfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLnNldFVuaWZvcm1zKE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgIGV4dHJ1ZGVkLFxuICAgICAgb3BhY2l0eSxcbiAgICAgIGNvdmVyYWdlLFxuICAgICAgZWxldmF0aW9uU2NhbGVcbiAgICB9LFxuICAgIGxpZ2h0U2V0dGluZ3MpKTtcbiAgfVxuXG4gIF9nZXRNb2RlbChnbCkge1xuICAgIGNvbnN0IHNoYWRlcnMgPSBhc3NlbWJsZVNoYWRlcnMoZ2wsIHRoaXMuZ2V0U2hhZGVycygpKTtcbiAgICByZXR1cm4gbmV3IE1vZGVsKHtcbiAgICAgIGdsLFxuICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICB2czogc2hhZGVycy52cyxcbiAgICAgIGZzOiBzaGFkZXJzLmZzLFxuICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2V0Q3lsaW5kZXJHZW9tZXRyeSgxKSxcbiAgICAgIGlzSW5zdGFuY2VkOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBkcmF3KHt1bmlmb3Jtc30pIHtcbiAgICBzdXBlci5kcmF3KHt1bmlmb3JtczogT2JqZWN0LmFzc2lnbih7fSwgdW5pZm9ybXMpfSk7XG4gIH1cblxuICBjYWxjdWxhdGVJbnN0YW5jZVBvc2l0aW9ucyhhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCB7ZGF0YSwgZ2V0Q2VudHJvaWQsIGdldEVsZXZhdGlvbn0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHt2YWx1ZSwgc2l6ZX0gPSBhdHRyaWJ1dGU7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIGRhdGEpIHtcbiAgICAgIGNvbnN0IFtsb24sIGxhdF0gPSBnZXRDZW50cm9pZChvYmplY3QpO1xuICAgICAgY29uc3QgZWxldmF0aW9uID0gZ2V0RWxldmF0aW9uKG9iamVjdCk7XG4gICAgICB2YWx1ZVtpICsgMF0gPSBsb247XG4gICAgICB2YWx1ZVtpICsgMV0gPSBsYXQ7XG4gICAgICB2YWx1ZVtpICsgMl0gPSBlbGV2YXRpb24gfHwgMDtcbiAgICAgIGkgKz0gc2l6ZTtcbiAgICB9XG4gIH1cblxuICBjYWxjdWxhdGVJbnN0YW5jZVBvc2l0aW9uczY0eHlMb3coYXR0cmlidXRlKSB7XG4gICAgY29uc3Qge2RhdGEsIGdldENlbnRyb2lkfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge3ZhbHVlfSA9IGF0dHJpYnV0ZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBvYmplY3Qgb2YgZGF0YSkge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRDZW50cm9pZChvYmplY3QpO1xuICAgICAgdmFsdWVbaSsrXSA9IGZwNjRpZnkocG9zaXRpb25bMF0pWzFdO1xuICAgICAgdmFsdWVbaSsrXSA9IGZwNjRpZnkocG9zaXRpb25bMV0pWzFdO1xuICAgIH1cbiAgfVxuXG4gIGNhbGN1bGF0ZUluc3RhbmNlQ29sb3JzKGF0dHJpYnV0ZSkge1xuICAgIGNvbnN0IHtkYXRhLCBnZXRDb2xvcn0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHt2YWx1ZSwgc2l6ZX0gPSBhdHRyaWJ1dGU7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIGRhdGEpIHtcbiAgICAgIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3Iob2JqZWN0KSB8fCBERUZBVUxUX0NPTE9SO1xuXG4gICAgICB2YWx1ZVtpICsgMF0gPSBjb2xvclswXTtcbiAgICAgIHZhbHVlW2kgKyAxXSA9IGNvbG9yWzFdO1xuICAgICAgdmFsdWVbaSArIDJdID0gY29sb3JbMl07XG4gICAgICB2YWx1ZVtpICsgM10gPSBOdW1iZXIuaXNGaW5pdGUoY29sb3JbM10pID8gY29sb3JbM10gOiBERUZBVUxUX0NPTE9SWzNdO1xuICAgICAgaSArPSBzaXplO1xuICAgIH1cbiAgfVxufVxuXG5IZXhhZ29uQ2VsbExheWVyLmxheWVyTmFtZSA9ICdIZXhhZ29uQ2VsbExheWVyJztcbkhleGFnb25DZWxsTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19