'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autobind = require('./autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _webglRenderer = require('./webgl-renderer');

var _webglRenderer2 = _interopRequireDefault(_webglRenderer);

var _lib = require('../lib');

var _experimental = require('../experimental');

var _luma = require('luma.gl');

var _viewports = require('../lib/viewports');

var _eventManager = require('../utils/events/event-manager');

var _eventManager2 = _interopRequireDefault(_eventManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function noop() {}

var propTypes = {
  id: _propTypes2.default.string,
  width: _propTypes2.default.number.isRequired,
  height: _propTypes2.default.number.isRequired,
  layers: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_lib.Layer)).isRequired,
  effects: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_experimental.Effect)),
  gl: _propTypes2.default.object,
  debug: _propTypes2.default.bool,
  pickingRadius: _propTypes2.default.number,
  viewport: _propTypes2.default.instanceOf(_viewports.Viewport),
  onWebGLInitialized: _propTypes2.default.func,
  onAfterRender: _propTypes2.default.func,
  onLayerClick: _propTypes2.default.func,
  onLayerHover: _propTypes2.default.func
};

var defaultProps = {
  id: 'deckgl-overlay',
  debug: false,
  pickingRadius: 0,
  gl: null,
  effects: [],
  onWebGLInitialized: noop,
  onAfterRender: noop,
  onLayerClick: null,
  onLayerHover: null
};

var DeckGL = function (_React$Component) {
  _inherits(DeckGL, _React$Component);

  function DeckGL(props) {
    _classCallCheck(this, DeckGL);

    var _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));

    _this.state = {};
    _this.needsRedraw = true;
    _this.layerManager = null;
    _this.effectManager = null;
    (0, _autobind2.default)(_this);
    return _this;
  }

  _createClass(DeckGL, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this._updateLayers(nextProps);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.layerManager) {
        this.layerManager.finalize();
      }
    }

    /* Public API */

  }, {
    key: 'queryObject',
    value: function queryObject(_ref) {
      var x = _ref.x,
          y = _ref.y,
          _ref$radius = _ref.radius,
          radius = _ref$radius === undefined ? 0 : _ref$radius,
          _ref$layerIds = _ref.layerIds,
          layerIds = _ref$layerIds === undefined ? null : _ref$layerIds;

      var selectedInfos = this.layerManager.pickLayer({ x: x, y: y, radius: radius, layerIds: layerIds, mode: 'query' });
      return selectedInfos.length ? selectedInfos[0] : null;
    }
  }, {
    key: 'queryVisibleObjects',
    value: function queryVisibleObjects(_ref2) {
      var x = _ref2.x,
          y = _ref2.y,
          _ref2$width = _ref2.width,
          width = _ref2$width === undefined ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === undefined ? 1 : _ref2$height,
          _ref2$layerIds = _ref2.layerIds,
          layerIds = _ref2$layerIds === undefined ? null : _ref2$layerIds;

      return this.layerManager.queryLayer({ x: x, y: y, width: width, height: height, layerIds: layerIds });
    }
  }, {
    key: '_updateLayers',
    value: function _updateLayers(nextProps) {
      var width = nextProps.width,
          height = nextProps.height,
          latitude = nextProps.latitude,
          longitude = nextProps.longitude,
          zoom = nextProps.zoom,
          pitch = nextProps.pitch,
          bearing = nextProps.bearing,
          altitude = nextProps.altitude,
          pickingRadius = nextProps.pickingRadius,
          onLayerClick = nextProps.onLayerClick,
          onLayerHover = nextProps.onLayerHover;


      this.layerManager.setEventHandlingParameters({
        pickingRadius: pickingRadius,
        onLayerClick: onLayerClick,
        onLayerHover: onLayerHover
      });

      // If Viewport is not supplied, create one from mercator props
      var viewport = nextProps.viewport;

      viewport = viewport || new _viewports.WebMercatorViewport({
        width: width, height: height, latitude: latitude, longitude: longitude, zoom: zoom, pitch: pitch, bearing: bearing, altitude: altitude
      });

      if (this.layerManager) {
        this.layerManager.setViewport(viewport).updateLayers({ newLayers: nextProps.layers });
      }
    }
  }, {
    key: '_onRendererInitialized',
    value: function _onRendererInitialized(_ref3) {
      var gl = _ref3.gl,
          canvas = _ref3.canvas;

      (0, _luma.setParameters)(gl, {
        blend: true,
        blendFunc: [_luma.GL.SRC_ALPHA, _luma.GL.ONE_MINUS_SRC_ALPHA],
        polygonOffsetFill: true
      });

      var props = this.props;

      props.onWebGLInitialized(gl);

      // Note: avoid React setState due GL animation loop / setState timing issue
      this.layerManager = new _lib.LayerManager({ gl: gl });
      this.layerManager.initEventHandling(new _eventManager2.default(canvas));
      this.effectManager = new _experimental.EffectManager({ gl: gl, layerManager: this.layerManager });

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = props.effects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var effect = _step.value;

          this.effectManager.addEffect(effect);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this._updateLayers(props);
    }
  }, {
    key: '_onRenderFrame',
    value: function _onRenderFrame(_ref4) {
      var gl = _ref4.gl;

      var redraw = this.layerManager.needsRedraw({ clearRedrawFlags: true });
      if (!redraw) {
        return;
      }

      // clear depth and color buffers
      gl.clear(_luma.GL.COLOR_BUFFER_BIT | _luma.GL.DEPTH_BUFFER_BIT);

      this.effectManager.preDraw();
      this.layerManager.drawLayers({ pass: 'to screen' });
      this.effectManager.draw();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          width = _props.width,
          height = _props.height,
          gl = _props.gl,
          debug = _props.debug;


      return (0, _react.createElement)(_webglRenderer2.default, Object.assign({}, this.props, {
        width: width,
        height: height,
        gl: gl,
        debug: debug,
        viewport: { x: 0, y: 0, width: width, height: height },
        onRendererInitialized: this._onRendererInitialized,
        onNeedRedraw: this._onNeedRedraw,
        onRenderFrame: this._onRenderFrame
      }));
    }
  }]);

  return DeckGL;
}(_react2.default.Component);

exports.default = DeckGL;


DeckGL.propTypes = propTypes;
DeckGL.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWFjdC9kZWNrZ2wuanMiXSwibmFtZXMiOlsibm9vcCIsInByb3BUeXBlcyIsImlkIiwic3RyaW5nIiwid2lkdGgiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwiaGVpZ2h0IiwibGF5ZXJzIiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJlZmZlY3RzIiwiZ2wiLCJvYmplY3QiLCJkZWJ1ZyIsImJvb2wiLCJwaWNraW5nUmFkaXVzIiwidmlld3BvcnQiLCJvbldlYkdMSW5pdGlhbGl6ZWQiLCJmdW5jIiwib25BZnRlclJlbmRlciIsIm9uTGF5ZXJDbGljayIsIm9uTGF5ZXJIb3ZlciIsImRlZmF1bHRQcm9wcyIsIkRlY2tHTCIsInByb3BzIiwic3RhdGUiLCJuZWVkc1JlZHJhdyIsImxheWVyTWFuYWdlciIsImVmZmVjdE1hbmFnZXIiLCJuZXh0UHJvcHMiLCJfdXBkYXRlTGF5ZXJzIiwiZmluYWxpemUiLCJ4IiwieSIsInJhZGl1cyIsImxheWVySWRzIiwic2VsZWN0ZWRJbmZvcyIsInBpY2tMYXllciIsIm1vZGUiLCJsZW5ndGgiLCJxdWVyeUxheWVyIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJ6b29tIiwicGl0Y2giLCJiZWFyaW5nIiwiYWx0aXR1ZGUiLCJzZXRFdmVudEhhbmRsaW5nUGFyYW1ldGVycyIsInNldFZpZXdwb3J0IiwidXBkYXRlTGF5ZXJzIiwibmV3TGF5ZXJzIiwiY2FudmFzIiwiYmxlbmQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwicG9seWdvbk9mZnNldEZpbGwiLCJpbml0RXZlbnRIYW5kbGluZyIsImVmZmVjdCIsImFkZEVmZmVjdCIsInJlZHJhdyIsImNsZWFyUmVkcmF3RmxhZ3MiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwicHJlRHJhdyIsImRyYXdMYXllcnMiLCJwYXNzIiwiZHJhdyIsIk9iamVjdCIsImFzc2lnbiIsIm9uUmVuZGVyZXJJbml0aWFsaXplZCIsIl9vblJlbmRlcmVySW5pdGlhbGl6ZWQiLCJvbk5lZWRSZWRyYXciLCJfb25OZWVkUmVkcmF3Iiwib25SZW5kZXJGcmFtZSIsIl9vblJlbmRlckZyYW1lIiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQW9CQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7OytlQTVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFZQSxTQUFTQSxJQUFULEdBQWdCLENBQUU7O0FBRWxCLElBQU1DLFlBQVk7QUFDaEJDLE1BQUksb0JBQVVDLE1BREU7QUFFaEJDLFNBQU8sb0JBQVVDLE1BQVYsQ0FBaUJDLFVBRlI7QUFHaEJDLFVBQVEsb0JBQVVGLE1BQVYsQ0FBaUJDLFVBSFQ7QUFJaEJFLFVBQVEsb0JBQVVDLE9BQVYsQ0FBa0Isb0JBQVVDLFVBQVYsWUFBbEIsRUFBK0NKLFVBSnZDO0FBS2hCSyxXQUFTLG9CQUFVRixPQUFWLENBQWtCLG9CQUFVQyxVQUFWLHNCQUFsQixDQUxPO0FBTWhCRSxNQUFJLG9CQUFVQyxNQU5FO0FBT2hCQyxTQUFPLG9CQUFVQyxJQVBEO0FBUWhCQyxpQkFBZSxvQkFBVVgsTUFSVDtBQVNoQlksWUFBVSxvQkFBVVAsVUFBVixxQkFUTTtBQVVoQlEsc0JBQW9CLG9CQUFVQyxJQVZkO0FBV2hCQyxpQkFBZSxvQkFBVUQsSUFYVDtBQVloQkUsZ0JBQWMsb0JBQVVGLElBWlI7QUFhaEJHLGdCQUFjLG9CQUFVSDtBQWJSLENBQWxCOztBQWdCQSxJQUFNSSxlQUFlO0FBQ25CckIsTUFBSSxnQkFEZTtBQUVuQlksU0FBTyxLQUZZO0FBR25CRSxpQkFBZSxDQUhJO0FBSW5CSixNQUFJLElBSmU7QUFLbkJELFdBQVMsRUFMVTtBQU1uQk8sc0JBQW9CbEIs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ZSI6ImRlY2tnbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHtjcmVhdGVFbGVtZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGF1dG9iaW5kIGZyb20gJy4vYXV0b2JpbmQnO1xuaW1wb3J0IFdlYkdMUmVuZGVyZXIgZnJvbSAnLi93ZWJnbC1yZW5kZXJlcic7XG5pbXBvcnQge0xheWVyTWFuYWdlciwgTGF5ZXJ9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQge0VmZmVjdE1hbmFnZXIsIEVmZmVjdH0gZnJvbSAnLi4vZXhwZXJpbWVudGFsJztcbmltcG9ydCB7R0wsIHNldFBhcmFtZXRlcnN9IGZyb20gJ2x1bWEuZ2wnO1xuaW1wb3J0IHtWaWV3cG9ydCwgV2ViTWVyY2F0b3JWaWV3cG9ydH0gZnJvbSAnLi4vbGliL3ZpZXdwb3J0cyc7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gJy4uL3V0aWxzL2V2ZW50cy9ldmVudC1tYW5hZ2VyJztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBsYXllcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5pbnN0YW5jZU9mKExheWVyKSkuaXNSZXF1aXJlZCxcbiAgZWZmZWN0czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmluc3RhbmNlT2YoRWZmZWN0KSksXG4gIGdsOiBQcm9wVHlwZXMub2JqZWN0LFxuICBkZWJ1ZzogUHJvcFR5cGVzLmJvb2wsXG4gIHBpY2tpbmdSYWRpdXM6IFByb3BUeXBlcy5udW1iZXIsXG4gIHZpZXdwb3J0OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihWaWV3cG9ydCksXG4gIG9uV2ViR0xJbml0aWFsaXplZDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQWZ0ZXJSZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxheWVyQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxheWVySG92ZXI6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIGlkOiAnZGVja2dsLW92ZXJsYXknLFxuICBkZWJ1ZzogZmFsc2UsXG4gIHBpY2tpbmdSYWRpdXM6IDAsXG4gIGdsOiBudWxsLFxuICBlZmZlY3RzOiBbXSxcbiAgb25XZWJHTEluaXRpYWxpemVkOiBub29wLFxuICBvbkFmdGVyUmVuZGVyOiBub29wLFxuICBvbkxheWVyQ2xpY2s6IG51bGwsXG4gIG9uTGF5ZXJIb3ZlcjogbnVsbFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVja0dMIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHRoaXMubmVlZHNSZWRyYXcgPSB0cnVlO1xuICAgIHRoaXMubGF5ZXJNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLmVmZmVjdE1hbmFnZXIgPSBudWxsO1xuICAgIGF1dG9iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB0aGlzLl91cGRhdGVMYXllcnMobmV4dFByb3BzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmxheWVyTWFuYWdlcikge1xuICAgICAgdGhpcy5sYXllck1hbmFnZXIuZmluYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgQVBJICovXG4gIHF1ZXJ5T2JqZWN0KHt4LCB5LCByYWRpdXMgPSAwLCBsYXllcklkcyA9IG51bGx9KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRJbmZvcyA9IHRoaXMubGF5ZXJNYW5hZ2VyLnBpY2tMYXllcih7eCwgeSwgcmFkaXVzLCBsYXllcklkcywgbW9kZTogJ3F1ZXJ5J30pO1xuICAgIHJldHVybiBzZWxlY3RlZEluZm9zLmxlbmd0aCA/IHNlbGVjdGVkSW5mb3NbMF0gOiBudWxsO1xuICB9XG5cbiAgcXVlcnlWaXNpYmxlT2JqZWN0cyh7eCwgeSwgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBsYXllcklkcyA9IG51bGx9KSB7XG4gICAgcmV0dXJuIHRoaXMubGF5ZXJNYW5hZ2VyLnF1ZXJ5TGF5ZXIoe3gsIHksIHdpZHRoLCBoZWlnaHQsIGxheWVySWRzfSk7XG4gIH1cblxuICBfdXBkYXRlTGF5ZXJzKG5leHRQcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgbGF0aXR1ZGUsXG4gICAgICBsb25naXR1ZGUsXG4gICAgICB6b29tLFxuICAgICAgcGl0Y2gsXG4gICAgICBiZWFyaW5nLFxuICAgICAgYWx0aXR1ZGUsXG4gICAgICBwaWNraW5nUmFkaXVzLFxuICAgICAgb25MYXllckNsaWNrLFxuICAgICAgb25MYXllckhvdmVyXG4gICAgfSA9IG5leHRQcm9wcztcblxuICAgIHRoaXMubGF5ZXJNYW5hZ2VyLnNldEV2ZW50SGFuZGxpbmdQYXJhbWV0ZXJzKHtcbiAgICAgIHBpY2tpbmdSYWRpdXMsXG4gICAgICBvbkxheWVyQ2xpY2ssXG4gICAgICBvbkxheWVySG92ZXJcbiAgICB9KTtcblxuICAgIC8vIElmIFZpZXdwb3J0IGlzIG5vdCBzdXBwbGllZCwgY3JlYXRlIG9uZSBmcm9tIG1lcmNhdG9yIHByb3BzXG4gICAgbGV0IHt2aWV3cG9ydH0gPSBuZXh0UHJvcHM7XG4gICAgdmlld3BvcnQgPSB2aWV3cG9ydCB8fCBuZXcgV2ViTWVyY2F0b3JWaWV3cG9ydCh7XG4gICAgICB3aWR0aCwgaGVpZ2h0LCBsYXRpdHVkZSwgbG9uZ2l0dWRlLCB6b29tLCBwaXRjaCwgYmVhcmluZywgYWx0aXR1ZGVcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmxheWVyTWFuYWdlcikge1xuICAgICAgdGhpcy5sYXllck1hbmFnZXJcbiAgICAgICAgLnNldFZpZXdwb3J0KHZpZXdwb3J0KVxuICAgICAgICAudXBkYXRlTGF5ZXJzKHtuZXdMYXllcnM6IG5leHRQcm9wcy5sYXllcnN9KTtcbiAgICB9XG4gIH1cblxuICBfb25SZW5kZXJlckluaXRpYWxpemVkKHtnbCwgY2FudmFzfSkge1xuICAgIHNldFBhcmFtZXRlcnMoZ2wsIHtcbiAgICAgIGJsZW5kOiB0cnVlLFxuICAgICAgYmxlbmRGdW5jOiBbR0wuU1JDX0FMUEhBLCBHTC5PTkVfTUlOVVNfU1JDX0FMUEhBXSxcbiAgICAgIHBvbHlnb25PZmZzZXRGaWxsOiB0cnVlXG4gICAgfSk7XG5cbiAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcbiAgICBwcm9wcy5vbldlYkdMSW5pdGlhbGl6ZWQoZ2wpO1xuXG4gICAgLy8gTm90ZTogYXZvaWQgUmVhY3Qgc2V0U3RhdGUgZHVlIEdMIGFuaW1hdGlvbiBsb29wIC8gc2V0U3RhdGUgdGltaW5nIGlzc3VlXG4gICAgdGhpcy5sYXllck1hbmFnZXIgPSBuZXcgTGF5ZXJNYW5hZ2VyKHtnbH0pO1xuICAgIHRoaXMubGF5ZXJNYW5hZ2VyLmluaXRFdmVudEhhbmRsaW5nKG5ldyBFdmVudE1hbmFnZXIoY2FudmFzKSk7XG4gICAgdGhpcy5lZmZlY3RNYW5hZ2VyID0gbmV3IEVmZmVjdE1hbmFnZXIoe2dsLCBsYXllck1hbmFnZXI6IHRoaXMubGF5ZXJNYW5hZ2VyfSk7XG5cbiAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBwcm9wcy5lZmZlY3RzKSB7XG4gICAgICB0aGlzLmVmZmVjdE1hbmFnZXIuYWRkRWZmZWN0KGVmZmVjdCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlTGF5ZXJzKHByb3BzKTtcbiAgfVxuXG4gIF9vblJlbmRlckZyYW1lKHtnbH0pIHtcbiAgICBjb25zdCByZWRyYXcgPSB0aGlzLmxheWVyTWFuYWdlci5uZWVkc1JlZHJhdyh7Y2xlYXJSZWRyYXdGbGFnczogdHJ1ZX0pO1xuICAgIGlmICghcmVkcmF3KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2xlYXIgZGVwdGggYW5kIGNvbG9yIGJ1ZmZlcnNcbiAgICBnbC5jbGVhcihHTC5DT0xPUl9CVUZGRVJfQklUIHwgR0wuREVQVEhfQlVGRkVSX0JJVCk7XG5cbiAgICB0aGlzLmVmZmVjdE1hbmFnZXIucHJlRHJhdygpO1xuICAgIHRoaXMubGF5ZXJNYW5hZ2VyLmRyYXdMYXllcnMoe3Bhc3M6ICd0byBzY3JlZW4nfSk7XG4gICAgdGhpcy5lZmZlY3RNYW5hZ2VyLmRyYXcoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodCwgZ2wsIGRlYnVnfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXZWJHTFJlbmRlcmVyLCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGdsLFxuICAgICAgZGVidWcsXG4gICAgICB2aWV3cG9ydDoge3g6IDAsIHk6IDAsIHdpZHRoLCBoZWlnaHR9LFxuICAgICAgb25SZW5kZXJlckluaXRpYWxpemVkOiB0aGlzLl9vblJlbmRlcmVySW5pdGlhbGl6ZWQsXG4gICAgICBvbk5lZWRSZWRyYXc6IHRoaXMuX29uTmVlZFJlZHJhdyxcbiAgICAgIG9uUmVuZGVyRnJhbWU6IHRoaXMuX29uUmVuZGVyRnJhbWVcbiAgICB9KSk7XG4gIH1cbn1cblxuRGVja0dMLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkRlY2tHTC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG4iXX0=