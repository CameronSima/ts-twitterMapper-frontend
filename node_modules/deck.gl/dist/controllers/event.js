'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keys = exports.EventsProxy = exports.stop = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // event.js
// Handle keyboard/mouse/touch events in the Canvas
// TODO - this will not work under node

/* eslint-disable dot-notation, max-statements, no-loop-func */
/* global window, document */


exports.get = get;
exports.getWheel = getWheel;
exports.getKey = getKey;
exports.isRightClick = isRightClick;
exports.getPos = getPos;
exports.addEvents = addEvents;

var _utils = require('../utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KEYS = {
  enter: 13,
  up: 38,
  down: 40,
  left: 37,
  right: 39,
  esc: 27,
  space: 32,
  backspace: 8,
  tab: 9,
  delete: 46
};

// returns an O3D object or false otherwise.
function toO3D(n) {
  return n !== true ? n : false;
}

// Returns an element position
function _getPos(elem) {
  var bbox = elem.getBoundingClientRect();
  return {
    x: bbox.left,
    y: bbox.top,
    bbox: bbox
  };
}

// event object wrapper
function get(e, win) {
  win = win || window;
  return e || win.event;
}

function getWheel(e) {
  return e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
}

function getKey(e) {
  var code = e.which || e.keyCode;
  var key = keyOf(code);
  // onkeydown
  var fKey = code - 111;
  if (fKey > 0 && fKey < 13) {
    key = 'f' + fKey;
  }
  key = key || String.fromCharCode(code).toLowerCase();

  return {
    code: code,
    key: key,
    shift: e.shiftKey,
    control: e.ctrlKey,
    alt: e.altKey,
    meta: e.metaKey
  };
}

function isRightClick(e) {
  return e.which === 3 || e.button === 2;
}

function getPos(e, win) {
  // get mouse position
  win = win || window;
  e = e || win.event;
  var doc = win.document;
  doc = doc.documentElement || doc.body;
  // TODO(nico): make touch event handling better
  if (e.touches && e.touches.length) {
    var touchesPos = [];
    var l = e.touches.length;
    var evt = void 0;
    for (var i = 0; i < l; ++i) {
      evt = e.touches[i];
      touchesPos.push({
        x: evt.pageX || evt.clientX + doc.scrollLeft,
        y: evt.pageY || evt.clientY + doc.scrollTop
      });
    }
    return touchesPos;
  }
  var page = {
    x: e.pageX || e.clientX + doc.scrollLeft,
    y: e.pageY || e.clientY + doc.scrollTop
  };
  return [page];
}

function _stop(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  e.cancelBubble = true;
  if (e.preventDefault) {
    e.preventDefault();
  } else {
    e.returnValue = false;
  }
}

exports.stop = _stop;

var EventsProxy = exports.EventsProxy = function () {
  function EventsProxy(domElem, opt) {
    _classCallCheck(this, EventsProxy);

    this.scene = opt.scene;
    this.domElem = domElem;
    this.pos = _getPos(domElem);
    this.opt = this.callbacks = opt;

    this.size = {
      width: domElem.width || domElem.offsetWidth,
      height: domElem.height || domElem.offsetHeight
    };

    this.attachEvents();
  }

  _createClass(EventsProxy, [{
    key: 'attachEvents',
    value: function attachEvents() {
      var _this = this;

      var domElem = this.domElem;
      var opt = this.opt;

      if (opt.disableContextMenu) {
        domElem.oncontextmenu = function () {
          return false;
        };
      }

      if (opt.enableMouse) {
        ['mouseup', 'mousedown', 'mousemove', 'mouseover', 'mouseout'].forEach(function (action) {
          domElem.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });

        // "well, this is embarrassing..."
        var type = '';
        if (!document.getBoxObjectFor && window.mozInnerScreenX === null) {
          type = 'mousewheel';
        } else {
          type = 'DOMMouseScroll';
        }
        domElem.addEventListener(type, function (e, win) {
          _this['mousewheel'](_this.eventInfo('mousewheel', e, win));
        }, false);
      }

      if (opt.enableTouch) {
        ['touchstart', 'touchmove', 'touchend'].forEach(function (action) {
          domElem.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });
      }

      if (opt.enableKeyboard) {
        ['keydown', 'keyup'].forEach(function (action) {
          document.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });
      }
    }
  }, {
    key: 'eventInfo',
    value: function eventInfo(type, e, win) {
      var domElem = this.domElem;
      var scene = this.scene;
      var opt = this.opt;
      var size = this.getSize();
      var relative = opt.relative;
      var centerOrigin = opt.centerOrigin;
      var pos = opt.cachePosition && this.pos || _getPos(domElem);
      var ge = get(e, win);
      var epos = getPos(e, win);
      var origPos = { x: epos[0].x, y: epos[0].y };
      var evt = {};
      var x = void 0;
      var y = void 0;

      // get Position
      for (var i = 0, l = epos.length; i < l; ++i) {
        x = epos[i].x;
        y = epos[i].y;
        if (relative) {
          x -= pos.x;y -= pos.y;
          if (centerOrigin) {
            x -= size.width / 2;
            y -= size.height / 2;
            // y axis now points to the top of the screen
            y *= -1;
          }
        }
        epos[i].x = x;
        epos[i].y = y;
      }

      switch (type) {
        case 'mousewheel':
          evt.wheel = getWheel(ge);
          break;
        case 'keydown':
        case 'keyup':
          Object.assign(evt, getKey(ge));
          break;
        case 'mouseup':
          evt.isRightClick = isRightClick(ge);
          break;
        default:
          break;
      }

      var cacheTarget = void 0;

      Object.assign(evt, {
        x: epos[0].x,
        y: epos[0].y,
        posArray: epos,

        cache: false,
        // stop event propagation
        stop: function stop() {
          _stop(ge);
        },

        // get the target element of the event
        getTarget: function getTarget() {
          if (cacheTarget) {
            return cacheTarget;
          }
          return cacheTarget = opt.picking && scene.pick(origPos.x - pos.x, origPos.y - pos.y) || true;
        }
      });
      // wrap native event
      evt.event = ge;

      return evt;
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      if (this.cacheSize) {
        return this.size;
      }
      var domElem = this.domElem;
      return {
        width: domElem.width || domElem.offsetWidth,
        height: domElem.height || domElem.offsetHeight
      };
    }
  }, {
    key: 'mouseup',
    value: function mouseup(e) {
      if (!this.moved) {
        if (e.isRightClick) {
          this.callbacks.onRightClick(e, this.hovered);
        } else {
          this.callbacks.onClick(e, toO3D(this.pressed));
        }
      }
      if (this.pressed) {
        if (this.moved) {
          this.callbacks.onDragEnd(e, toO3D(this.pressed));
        } else {
          this.callbacks.onDragCancel(e, toO3D(this.pressed));
        }
        this.pressed = this.moved = false;
      }
    }
  }, {
    key: 'mouseout',
    value: function mouseout(e) {
      // mouseout canvas
      var rt = e.relatedTarget;
      var domElem = this.domElem;
      while (rt && rt.parentNode) {
        if (domElem === rt.parentNode) {
          return;
        }
        rt = rt.parentNode;
      }
      if (this.hovered) {
        this.callbacks.onMouseLeave(e, this.hovered);
        this.hovered = false;
      }
      if (this.pressed && this.moved) {
        this.callbacks.onDragEnd(e);
        this.pressed = this.moved = false;
      }
    }
  }, {
    key: 'mouseover',
    value: function mouseover(e) {}
  }, {
    key: 'mousemove',
    value: function mousemove(e) {
      if (this.pressed) {
        this.moved = true;
        this.callbacks.onDragMove(e, toO3D(this.pressed));
        return;
      }
      if (this.hovered) {
        var target = toO3D(e.getTarget());
        if (!target || target.hash !== this.hash) {
          this.callbacks.onMouseLeave(e, this.hovered);
          this.hovered = target;
          this.hash = target;
          if (target) {
            this.hash = target.hash;
            this.callbacks.onMouseEnter(e, this.hovered);
          }
        } else {
          this.callbacks.onMouseMove(e, this.hovered);
        }
      } else {
        this.hovered = toO3D(e.getTarget());
        this.hash = this.hovered;
        if (this.hovered) {
          this.hash = this.hovered.hash;
          this.callbacks.onMouseEnter(e, this.hovered);
        }
      }
      if (!this.opt.picking) {
        this.callbacks.onMouseMove(e);
      }
    }
  }, {
    key: 'mousewheel',
    value: function mousewheel(e) {
      this.callbacks.onMouseWheel(e);
    }
  }, {
    key: 'mousedown',
    value: function mousedown(e) {
      this.pressed = e.getTarget();
      this.callbacks.onDragStart(e, toO3D(this.pressed));
    }
  }, {
    key: 'touchstart',
    value: function touchstart(e) {
      this.touched = e.getTarget();
      this.touchedLastPosition = { x: e.x, y: e.y };
      this.callbacks.onTouchStart(e, toO3D(this.touched));
    }
  }, {
    key: 'touchmove',
    value: function touchmove(e) {
      if (this.touched) {
        this.touchMoved = true;
        this.callbacks.onTouchMove(e, toO3D(this.touched));
      }
    }
  }, {
    key: 'touchend',
    value: function touchend(e) {
      if (this.touched) {
        if (this.touchMoved) {
          this.callbacks.onTouchEnd(e, toO3D(this.touched));
        } else {
          e.x = isNaN(e.x) ? this.touchedLastPosition.x : e.x;
          e.y = isNaN(e.y) ? this.touchedLastPosition.y : e.y;
          this.callbacks.onTap(e, toO3D(this.touched));
          this.callbacks.onTouchCancel(e, toO3D(this.touched));
        }
        this.touched = this.touchMoved = false;
      }
    }
  }, {
    key: 'keydown',
    value: function keydown(e) {
      this.callbacks.onKeyDown(e);
    }
  }, {
    key: 'keyup',
    value: function keyup(e) {
      this.callbacks.onKeyUp(e);
    }
  }]);

  return EventsProxy;
}();

Object.assign(EventsProxy.prototype, {
  hovered: false,
  pressed: false,
  touched: false,
  touchedLastPosition: { x: 0, y: 0 },
  touchMoved: false,
  moved: false
});

var DEFAULT_OPTS = {
  cachePosition: true,
  cacheSize: true,
  relative: true,
  centerOrigin: true,
  disableContextMenu: true,
  bind: false,
  picking: false,

  enableTouch: true,
  enableMouse: true,
  enableKeyboard: true,

  onClick: _utils.noop,
  onRightClick: _utils.noop,
  onDragStart: _utils.noop,
  onDragMove: _utils.noop,
  onDragEnd: _utils.noop,
  onDragCancel: _utils.noop,
  onTouchStart: _utils.noop,
  onTouchMove: _utils.noop,
  onTouchEnd: _utils.noop,
  onTouchCancel: _utils.noop,
  onTap: _utils.noop,
  onMouseMove: _utils.noop,
  onMouseEnter: _utils.noop,
  onMouseLeave: _utils.noop,
  onMouseWheel: _utils.noop,
  onKeyDown: _utils.noop,
  onKeyUp: _utils.noop
};

var Keys = exports.Keys = KEYS;

function keyOf(code) {
  var keyMap = Keys;
  for (var name in keyMap) {
    if (keyMap[name] === code) {
      return name;
    }
  }
  return null;
}

function addEvents(domElement) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  opt = Object.assign({}, DEFAULT_OPTS, opt);

  var bind = opt.bind;
  if (bind) {
    for (var name in opt) {
      if (name.match(/^on[a-zA-Z0-9]+$/)) {
        (function (fname, fn) {
          opt[fname] = function f() {
            fn.apply(bind, Array.prototype.slice.call(arguments));
          };
        })(name, opt[name]);
      }
    }
  }

  return new EventsProxy(domElement, opt);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy9ldmVudC5qcyJdLCJuYW1lcyI6WyJnZXQiLCJnZXRXaGVlbCIsImdldEtleSIsImlzUmlnaHRDbGljayIsImdldFBvcyIsImFkZEV2ZW50cyIsIktFWVMiLCJlbnRlciIsInVwIiwiZG93biIsImxlZnQiLCJyaWdodCIsImVzYyIsInNwYWNlIiwiYmFja3NwYWNlIiwidGFiIiwiZGVsZXRlIiwidG9PM0QiLCJuIiwiX2dldFBvcyIsImVsZW0iLCJiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwieCIsInkiLCJ0b3AiLCJlIiwid2luIiwid2luZG93IiwiZXZlbnQiLCJ3aGVlbERlbHRhIiwiZGV0YWlsIiwiY29kZSIsIndoaWNoIiwia2V5Q29kZSIsImtleSIsImtleU9mIiwiZktleSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvTG93ZXJDYXNlIiwic2hpZnQiLCJzaGlmdEtleSIsImNvbnRyb2wiLCJjdHJsS2V5IiwiYWx0IiwiYWx0S2V5IiwibWV0YSIsIm1ldGFLZXkiLCJidXR0b24iLCJkb2MiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImJvZHkiLCJ0b3VjaGVzIiwibGVuZ3RoIiwidG91Y2hlc1BvcyIsImwiLCJldnQiLCJpIiwicHVzaCIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJwYWdlIiwic3RvcCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInByZXZlbnREZWZhdWx0IiwicmV0dXJuVmFsdWUiLCJFdmVudHNQcm94eSIsImRvbUVsZW0iLCJvcHQiLCJzY2VuZSIsInBvcyIsImNhbGxiYWNrcyIsInNpemUiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiYXR0YWNoRXZlbnRzIiwiZGlzYWJsZUNvbnRleHRNZW51Iiwib25jb250ZXh0bWVudSIsImVuYWJsZU1vdXNlIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhY3Rpb24iLCJldmVudEluZm8iLCJ0eXBlIiwiZ2V0Qm94T2JqZWN0Rm9yIiwibW96SW5uZXJTY3JlZW5YIiwiZW5hYmxlVG91Y2giLCJlbmFibGVLZXlib2FyZCIsImdldFNpemUiLCJyZWxhdGl2ZSIsImNlbnRlck9yaWdpbiIsImNhY2hlUG9zaXRpb24iLCJnZSIsImVwb3MiLCJvcmlnUG9zIiwid2hlZWwiLCJPYmplY3QiLCJhc3NpZ24iLCJjYWNoZVRhcmdldCIsInBvc0FycmF5IiwiY2FjaGUiLCJnZXRUYXJnZXQiLCJwaWNraW5nIiwicGljayIsImNhY2hlU2l6ZSIsIm1vdmVkIiwib25SaWdodENsaWNrIiwiaG92ZXJlZCIsIm9uQ2xpY2siLCJwcmVzc2VkIiwib25EcmFnRW5kIiwib25EcmFnQ2FuY2VsIiwicnQiLCJyZWxhdGVkVGFyZ2V0IiwicGFyZW50Tm9kZSIsIm9uTW91c2VMZWF2ZSIsIm9uRHJhZ01vdmUiLCJ0YXJnZXQiLCJoYXNoIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlV2hlZWwiLCJvbkRyYWdTdGFydCIsInRvdWNoZWQiLCJ0b3VjaGVkTGFzdFBvc2l0aW9uIiwib25Ub3VjaFN0YXJ0IiwidG91Y2hNb3ZlZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsImlzTmFOIiwib25UYXAiLCJvblRvdWNoQ2FuY2VsIiwib25LZXlEb3duIiwib25LZXlVcCIsInByb3RvdHlwZSIsIkRFRkFVTFRfT1BUUyIsImJpbmQiLCJLZXlzIiwia2V5TWFwIiwibmFtZSIsImRvbUVsZW1lbnQiLCJtYXRjaCIsImZuYW1lIiwiZm4iLCJmIiwiYXBwbHkiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztxakJBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztRQWdDZ0JBLEcsR0FBQUEsRztRQUtBQyxRLEdBQUFBLFE7UUFJQUMsTSxHQUFBQSxN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QUFuQixFQUEyQjtBQUN6QixRQUFJQSxPQUFPQyxJQUFQLE1BQWlCcEgsSUFBckIsRUFBMkI7QUFDekIsYUFBT29ILElBQVA7QUFDRDtBQUNGO0FBQ0QsU0FBTyxJQUFQO0FBQ0Q7O0FBRU0sU0FBUy9JLFNBQVQsQ0FBbUJnSixVQUFuQixFQUF5QztBQUFBLE1BQVYxRSxHQUFVLHVFQUFKLEVBQUk7O0FBQzlDQSxRQUFNOEIsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JzQyxZQUFsQixFQUFnQ3JFLEdBQWhDLENBQU47O0FBRUEsTUFBTXNFLE9BQU90RSxJQUFJc0UsSUFBakI7QUFDQSxNQUFJQSxJQUFKLEVBQVU7QUFDUixTQUFLLElBQU1HLElBQVgsSUFBbUJ6RSxHQUFuQixFQUF3QjtBQUN0QixVQUFJeUUsS0FBS0UsS0FBTCxDQUFXLGtCQUFYLENBQUosRUFBb0M7QUFDbEMsU0FBQyxVQUFDQyxLQUFELEVBQVFDLEVBQVIsRUFBZTtBQUNkN0UsY0FBSTRFLEtBQUosSUFBYSxTQUFTRSxDQUFULEdBQWE7QUFDeEJELGVBQUdFLEtBQUgsQ0FBU1QsSUFBVCxFQUFlVSxNQUFNWixTQUFOLENBQWdCYSxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLFNBQTNCLENBQWY7QUFDRCxXQUZEO0FBR0QsU0FKRCxFQUlHVixJQUpILEVBSVN6RSxJQUFJeUUsSUFBSixDQUpUO0FBS0Q7QUFDRjtBQUNGOztBQUVELFNBQU8sSUFBSTNFLFdBQUosQ0FBZ0I0RSxVQUFoQixFQUE0QjFFLEdBQTVCLENBQVA7QUFDRCIsImZpbGUiOiJldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV2ZW50LmpzXG4vLyBIYW5kbGUga2V5Ym9hcmQvbW91c2UvdG91Y2ggZXZlbnRzIGluIHRoZSBDYW52YXNcbi8vIFRPRE8gLSB0aGlzIHdpbGwgbm90IHdvcmsgdW5kZXIgbm9kZVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBkb3Qtbm90YXRpb24sIG1heC1zdGF0ZW1lbnRzLCBuby1sb29wLWZ1bmMgKi9cbi8qIGdsb2JhbCB3aW5kb3csIGRvY3VtZW50ICovXG5pbXBvcnQge25vb3B9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgS0VZUyA9IHtcbiAgZW50ZXI6IDEzLFxuICB1cDogMzgsXG4gIGRvd246IDQwLFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBlc2M6IDI3LFxuICBzcGFjZTogMzIsXG4gIGJhY2tzcGFjZTogOCxcbiAgdGFiOiA5LFxuICBkZWxldGU6IDQ2XG59O1xuXG4vLyByZXR1cm5zIGFuIE8zRCBvYmplY3Qgb3IgZmFsc2Ugb3RoZXJ3aXNlLlxuZnVuY3Rpb24gdG9PM0Qobikge1xuICByZXR1cm4gbiAhPT0gdHJ1ZSA/IG4gOiBmYWxzZTtcbn1cblxuLy8gUmV0dXJucyBhbiBlbGVtZW50IHBvc2l0aW9uXG5mdW5jdGlvbiBfZ2V0UG9zKGVsZW0pIHtcbiAgY29uc3QgYmJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgeDogYmJveC5sZWZ0LFxuICAgIHk6IGJib3gudG9wLFxuICAgIGJib3hcbiAgfTtcbn1cblxuLy8gZXZlbnQgb2JqZWN0IHdyYXBwZXJcbmV4cG9ydCBmdW5jdGlvbiBnZXQoZSwgd2luKSB7XG4gIHdpbiA9IHdpbiB8fCB3aW5kb3c7XG4gIHJldHVybiBlIHx8IHdpbi5ldmVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdoZWVsKGUpIHtcbiAgcmV0dXJuIGUud2hlZWxEZWx0YSA/IGUud2hlZWxEZWx0YSAvIDEyMCA6IC0oZS5kZXRhaWwgfHwgMCkgLyAzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5KGUpIHtcbiAgY29uc3QgY29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuICBsZXQga2V5ID0ga2V5T2YoY29kZSk7XG4gIC8vIG9ua2V5ZG93blxuICBjb25zdCBmS2V5ID0gY29kZSAtIDExMTtcbiAgaWYgKGZLZXkgPiAwICYmIGZLZXkgPCAxMykge1xuICAgIGtleSA9IGBmJHtmS2V5fWA7XG4gIH1cbiAga2V5ID0ga2V5IHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkudG9Mb3dlckNhc2UoKTtcblxuICByZXR1cm4ge1xuICAgIGNvZGUsXG4gICAga2V5LFxuICAgIHNoaWZ0OiBlLnNoaWZ0S2V5LFxuICAgIGNvbnRyb2w6IGUuY3RybEtleSxcbiAgICBhbHQ6IGUuYWx0S2V5LFxuICAgIG1ldGE6IGUubWV0YUtleVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSaWdodENsaWNrKGUpIHtcbiAgcmV0dXJuIGUud2hpY2ggPT09IDMgfHwgZS5idXR0b24gPT09IDI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3MoZSwgd2luKSB7XG4gIC8vIGdldCBtb3VzZSBwb3NpdGlvblxuICB3aW4gPSB3aW4gfHwgd2luZG93O1xuICBlID0gZSB8fCB3aW4uZXZlbnQ7XG4gIGxldCBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gIGRvYyA9IGRvYy5kb2N1bWVudEVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIC8vIFRPRE8obmljbyk6IG1ha2UgdG91Y2ggZXZlbnQgaGFuZGxpbmcgYmV0dGVyXG4gIGlmIChlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCkge1xuICAgIGNvbnN0IHRvdWNoZXNQb3MgPSBbXTtcbiAgICBjb25zdCBsID0gZS50b3VjaGVzLmxlbmd0aDtcbiAgICBsZXQgZXZ0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICBldnQgPSBlLnRvdWNoZXNbaV07XG4gICAgICB0b3VjaGVzUG9zLnB1c2goe1xuICAgICAgICB4OiBldnQucGFnZVggfHwgKGV2dC5jbGllbnRYICsgZG9jLnNjcm9sbExlZnQpLFxuICAgICAgICB5OiBldnQucGFnZVkgfHwgKGV2dC5jbGllbnRZICsgZG9jLnNjcm9sbFRvcClcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdG91Y2hlc1BvcztcbiAgfVxuICBjb25zdCBwYWdlID0ge1xuICAgIHg6IGUucGFnZVggfHwgKGUuY2xpZW50WCArIGRvYy5zY3JvbGxMZWZ0KSxcbiAgICB5OiBlLnBhZ2VZIHx8IChlLmNsaWVudFkgKyBkb2Muc2Nyb2xsVG9wKVxuICB9O1xuICByZXR1cm4gW3BhZ2VdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcChlKSB7XG4gIGlmIChlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSBlbHNlIHtcbiAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50c1Byb3h5IHtcblxuICBjb25zdHJ1Y3Rvcihkb21FbGVtLCBvcHQpIHtcbiAgICB0aGlzLnNjZW5lID0gb3B0LnNjZW5lO1xuICAgIHRoaXMuZG9tRWxlbSA9IGRvbUVsZW07XG4gICAgdGhpcy5wb3MgPSBfZ2V0UG9zKGRvbUVsZW0pO1xuICAgIHRoaXMub3B0ID0gdGhpcy5jYWxsYmFja3MgPSBvcHQ7XG5cbiAgICB0aGlzLnNpemUgPSB7XG4gICAgICB3aWR0aDogZG9tRWxlbS53aWR0aCB8fCBkb21FbGVtLm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkb21FbGVtLmhlaWdodCB8fCBkb21FbGVtLm9mZnNldEhlaWdodFxuICAgIH07XG5cbiAgICB0aGlzLmF0dGFjaEV2ZW50cygpO1xuICB9XG5cbiAgYXR0YWNoRXZlbnRzKCkge1xuICAgIGNvbnN0IGRvbUVsZW0gPSB0aGlzLmRvbUVsZW07XG4gICAgY29uc3Qgb3B0ID0gdGhpcy5vcHQ7XG5cbiAgICBpZiAob3B0LmRpc2FibGVDb250ZXh0TWVudSkge1xuICAgICAgZG9tRWxlbS5vbmNvbnRleHRtZW51ID0gKCkgPT4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG9wdC5lbmFibGVNb3VzZSkge1xuICAgICAgWydtb3VzZXVwJywgJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J11cbiAgICAgIC5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICAgIGRvbUVsZW0uYWRkRXZlbnRMaXN0ZW5lcihhY3Rpb24sIChlLCB3aW4pID0+IHtcbiAgICAgICAgICB0aGlzW2FjdGlvbl0odGhpcy5ldmVudEluZm8oYWN0aW9uLCBlLCB3aW4pKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFwid2VsbCwgdGhpcyBpcyBlbWJhcnJhc3NpbmcuLi5cIlxuICAgICAgbGV0IHR5cGUgPSAnJztcbiAgICAgIGlmICghZG9jdW1lbnQuZ2V0Qm94T2JqZWN0Rm9yICYmIHdpbmRvdy5tb3pJbm5lclNjcmVlblggPT09IG51bGwpIHtcbiAgICAgICAgdHlwZSA9ICdtb3VzZXdoZWVsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSAnRE9NTW91c2VTY3JvbGwnO1xuICAgICAgfVxuICAgICAgZG9tRWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIChlLCB3aW4pID0+IHtcbiAgICAgICAgdGhpc1snbW91c2V3aGVlbCddKHRoaXMuZXZlbnRJbmZvKCdtb3VzZXdoZWVsJywgZSwgd2luKSk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdC5lbmFibGVUb3VjaCkge1xuICAgICAgWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCddLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgICAgZG9tRWxlbS5hZGRFdmVudExpc3RlbmVyKGFjdGlvbiwgKGUsIHdpbikgPT4ge1xuICAgICAgICAgIHRoaXNbYWN0aW9uXSh0aGlzLmV2ZW50SW5mbyhhY3Rpb24sIGUsIHdpbikpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0LmVuYWJsZUtleWJvYXJkKSB7XG4gICAgICBbJ2tleWRvd24nLCAna2V5dXAnXS5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoYWN0aW9uLCAoZSwgd2luKSA9PiB7XG4gICAgICAgICAgdGhpc1thY3Rpb25dKHRoaXMuZXZlbnRJbmZvKGFjdGlvbiwgZSwgd2luKSk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGV2ZW50SW5mbyh0eXBlLCBlLCB3aW4pIHtcbiAgICBjb25zdCBkb21FbGVtID0gdGhpcy5kb21FbGVtO1xuICAgIGNvbnN0IHNjZW5lID0gdGhpcy5zY2VuZTtcbiAgICBjb25zdCBvcHQgPSB0aGlzLm9wdDtcbiAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCk7XG4gICAgY29uc3QgcmVsYXRpdmUgPSBvcHQucmVsYXRpdmU7XG4gICAgY29uc3QgY2VudGVyT3JpZ2luID0gb3B0LmNlbnRlck9yaWdpbjtcbiAgICBjb25zdCBwb3MgPSBvcHQuY2FjaGVQb3NpdGlvbiAmJiB0aGlzLnBvcyB8fCBfZ2V0UG9zKGRvbUVsZW0pO1xuICAgIGNvbnN0IGdlID0gZ2V0KGUsIHdpbik7XG4gICAgY29uc3QgZXBvcyA9IGdldFBvcyhlLCB3aW4pO1xuICAgIGNvbnN0IG9yaWdQb3MgPSB7eDogZXBvc1swXS54LCB5OiBlcG9zWzBdLnl9O1xuICAgIGNvbnN0IGV2dCA9IHt9O1xuICAgIGxldCB4O1xuICAgIGxldCB5O1xuXG4gICAgLy8gZ2V0IFBvc2l0aW9uXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlcG9zLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgeCA9IGVwb3NbaV0ueDtcbiAgICAgIHkgPSBlcG9zW2ldLnk7XG4gICAgICBpZiAocmVsYXRpdmUpIHtcbiAgICAgICAgeCAtPSBwb3MueDsgeSAtPSBwb3MueTtcbiAgICAgICAgaWYgKGNlbnRlck9yaWdpbikge1xuICAgICAgICAgIHggLT0gc2l6ZS53aWR0aCAvIDI7XG4gICAgICAgICAgeSAtPSBzaXplLmhlaWdodCAvIDI7XG4gICAgICAgICAgLy8geSBheGlzIG5vdyBwb2ludHMgdG8gdGhlIHRvcCBvZiB0aGUgc2NyZWVuXG4gICAgICAgICAgeSAqPSAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZXBvc1tpXS54ID0geDtcbiAgICAgIGVwb3NbaV0ueSA9IHk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnbW91c2V3aGVlbCc6XG4gICAgICBldnQud2hlZWwgPSBnZXRXaGVlbChnZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdrZXlkb3duJzpcbiAgICBjYXNlICdrZXl1cCc6XG4gICAgICBPYmplY3QuYXNzaWduKGV2dCwgZ2V0S2V5KGdlKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtb3VzZXVwJzpcbiAgICAgIGV2dC5pc1JpZ2h0Q2xpY2sgPSBpc1JpZ2h0Q2xpY2soZ2UpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxldCBjYWNoZVRhcmdldDtcblxuICAgIE9iamVjdC5hc3NpZ24oZXZ0LCB7XG4gICAgICB4OiBlcG9zWzBdLngsXG4gICAgICB5OiBlcG9zWzBdLnksXG4gICAgICBwb3NBcnJheTogZXBvcyxcblxuICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgLy8gc3RvcCBldmVudCBwcm9wYWdhdGlvblxuICAgICAgc3RvcCgpIHtcbiAgICAgICAgc3RvcChnZSk7XG4gICAgICB9LFxuICAgICAgLy8gZ2V0IHRoZSB0YXJnZXQgZWxlbWVudCBvZiB0aGUgZXZlbnRcbiAgICAgIGdldFRhcmdldCgpIHtcbiAgICAgICAgaWYgKGNhY2hlVGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY2FjaGVUYXJnZXQgPSBvcHQucGlja2luZyAmJlxuICAgICAgICAgIHNjZW5lLnBpY2sob3JpZ1Bvcy54IC0gcG9zLngsIG9yaWdQb3MueSAtIHBvcy55KSB8fCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyB3cmFwIG5hdGl2ZSBldmVudFxuICAgIGV2dC5ldmVudCA9IGdlO1xuXG4gICAgcmV0dXJuIGV2dDtcbiAgfVxuXG4gIGdldFNpemUoKSB7XG4gICAgaWYgKHRoaXMuY2FjaGVTaXplKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgIH1cbiAgICBjb25zdCBkb21FbGVtID0gdGhpcy5kb21FbGVtO1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogZG9tRWxlbS53aWR0aCB8fCBkb21FbGVtLm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkb21FbGVtLmhlaWdodCB8fCBkb21FbGVtLm9mZnNldEhlaWdodFxuICAgIH07XG4gIH1cblxuICBtb3VzZXVwKGUpIHtcbiAgICBpZiAoIXRoaXMubW92ZWQpIHtcbiAgICAgIGlmIChlLmlzUmlnaHRDbGljaykge1xuICAgICAgICB0aGlzLmNhbGxiYWNrcy5vblJpZ2h0Q2xpY2soZSwgdGhpcy5ob3ZlcmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uQ2xpY2soZSwgdG9PM0QodGhpcy5wcmVzc2VkKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnByZXNzZWQpIHtcbiAgICAgIGlmICh0aGlzLm1vdmVkKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ0VuZChlLCB0b08zRCh0aGlzLnByZXNzZWQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ0NhbmNlbChlLCB0b08zRCh0aGlzLnByZXNzZWQpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlc3NlZCA9IHRoaXMubW92ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBtb3VzZW91dChlKSB7XG4gICAgLy8gbW91c2VvdXQgY2FudmFzXG4gICAgbGV0IHJ0ID0gZS5yZWxhdGVkVGFyZ2V0O1xuICAgIGNvbnN0IGRvbUVsZW0gPSB0aGlzLmRvbUVsZW07XG4gICAgd2hpbGUgKHJ0ICYmIHJ0LnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChkb21FbGVtID09PSBydC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJ0ID0gcnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaG92ZXJlZCkge1xuICAgICAgdGhpcy5jYWxsYmFja3Mub25Nb3VzZUxlYXZlKGUsIHRoaXMuaG92ZXJlZCk7XG4gICAgICB0aGlzLmhvdmVyZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJlc3NlZCAmJiB0aGlzLm1vdmVkKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrcy5vbkRyYWdFbmQoZSk7XG4gICAgICB0aGlzLnByZXNzZWQgPSB0aGlzLm1vdmVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgbW91c2VvdmVyKGUpIHtcbiAgfVxuXG4gIG1vdXNlbW92ZShlKSB7XG4gICAgaWYgKHRoaXMucHJlc3NlZCkge1xuICAgICAgdGhpcy5tb3ZlZCA9IHRydWU7XG4gICAgICB0aGlzLmNhbGxiYWNrcy5vbkRyYWdNb3ZlKGUsIHRvTzNEKHRoaXMucHJlc3NlZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5ob3ZlcmVkKSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0b08zRChlLmdldFRhcmdldCgpKTtcbiAgICAgIGlmICghdGFyZ2V0IHx8IHRhcmdldC5oYXNoICE9PSB0aGlzLmhhc2gpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25Nb3VzZUxlYXZlKGUsIHRoaXMuaG92ZXJlZCk7XG4gICAgICAgIHRoaXMuaG92ZXJlZCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5oYXNoID0gdGFyZ2V0O1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5oYXNoID0gdGFyZ2V0Lmhhc2g7XG4gICAgICAgICAgdGhpcy5jYWxsYmFja3Mub25Nb3VzZUVudGVyKGUsIHRoaXMuaG92ZXJlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uTW91c2VNb3ZlKGUsIHRoaXMuaG92ZXJlZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaG92ZXJlZCA9IHRvTzNEKGUuZ2V0VGFyZ2V0KCkpO1xuICAgICAgdGhpcy5oYXNoID0gdGhpcy5ob3ZlcmVkO1xuICAgICAgaWYgKHRoaXMuaG92ZXJlZCkge1xuICAgICAgICB0aGlzLmhhc2ggPSB0aGlzLmhvdmVyZWQuaGFzaDtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25Nb3VzZUVudGVyKGUsIHRoaXMuaG92ZXJlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5vcHQucGlja2luZykge1xuICAgICAgdGhpcy5jYWxsYmFja3Mub25Nb3VzZU1vdmUoZSk7XG4gICAgfVxuICB9XG5cbiAgbW91c2V3aGVlbChlKSB7XG4gICAgdGhpcy5jYWxsYmFja3Mub25Nb3VzZVdoZWVsKGUpO1xuICB9XG5cbiAgbW91c2Vkb3duKGUpIHtcbiAgICB0aGlzLnByZXNzZWQgPSBlLmdldFRhcmdldCgpO1xuICAgIHRoaXMuY2FsbGJhY2tzLm9uRHJhZ1N0YXJ0KGUsIHRvTzNEKHRoaXMucHJlc3NlZCkpO1xuICB9XG5cbiAgdG91Y2hzdGFydChlKSB7XG4gICAgdGhpcy50b3VjaGVkID0gZS5nZXRUYXJnZXQoKTtcbiAgICB0aGlzLnRvdWNoZWRMYXN0UG9zaXRpb24gPSB7eDogZS54LCB5OiBlLnl9O1xuICAgIHRoaXMuY2FsbGJhY2tzLm9uVG91Y2hTdGFydChlLCB0b08zRCh0aGlzLnRvdWNoZWQpKTtcbiAgfVxuXG4gIHRvdWNobW92ZShlKSB7XG4gICAgaWYgKHRoaXMudG91Y2hlZCkge1xuICAgICAgdGhpcy50b3VjaE1vdmVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVG91Y2hNb3ZlKGUsIHRvTzNEKHRoaXMudG91Y2hlZCkpO1xuICAgIH1cbiAgfVxuXG4gIHRvdWNoZW5kKGUpIHtcbiAgICBpZiAodGhpcy50b3VjaGVkKSB7XG4gICAgICBpZiAodGhpcy50b3VjaE1vdmVkKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVG91Y2hFbmQoZSwgdG9PM0QodGhpcy50b3VjaGVkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLnggPSBpc05hTihlLngpID8gdGhpcy50b3VjaGVkTGFzdFBvc2l0aW9uLnggOiBlLng7XG4gICAgICAgIGUueSA9IGlzTmFOKGUueSkgPyB0aGlzLnRvdWNoZWRMYXN0UG9zaXRpb24ueSA6IGUueTtcbiAgICAgICAgdGhpcy5jYWxsYmFja3Mub25UYXAoZSwgdG9PM0QodGhpcy50b3VjaGVkKSk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLm9uVG91Y2hDYW5jZWwoZSwgdG9PM0QodGhpcy50b3VjaGVkKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnRvdWNoZWQgPSB0aGlzLnRvdWNoTW92ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBrZXlkb3duKGUpIHtcbiAgICB0aGlzLmNhbGxiYWNrcy5vbktleURvd24oZSk7XG4gIH1cblxuICBrZXl1cChlKSB7XG4gICAgdGhpcy5jYWxsYmFja3Mub25LZXlVcChlKTtcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKEV2ZW50c1Byb3h5LnByb3RvdHlwZSwge1xuICBob3ZlcmVkOiBmYWxzZSxcbiAgcHJlc3NlZDogZmFsc2UsXG4gIHRvdWNoZWQ6IGZhbHNlLFxuICB0b3VjaGVkTGFzdFBvc2l0aW9uOiB7eDogMCwgeTogMH0sXG4gIHRvdWNoTW92ZWQ6IGZhbHNlLFxuICBtb3ZlZDogZmFsc2Vcbn0pO1xuXG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIGNhY2hlUG9zaXRpb246IHRydWUsXG4gIGNhY2hlU2l6ZTogdHJ1ZSxcbiAgcmVsYXRpdmU6IHRydWUsXG4gIGNlbnRlck9yaWdpbjogdHJ1ZSxcbiAgZGlzYWJsZUNvbnRleHRNZW51OiB0cnVlLFxuICBiaW5kOiBmYWxzZSxcbiAgcGlja2luZzogZmFsc2UsXG5cbiAgZW5hYmxlVG91Y2g6IHRydWUsXG4gIGVuYWJsZU1vdXNlOiB0cnVlLFxuICBlbmFibGVLZXlib2FyZDogdHJ1ZSxcblxuICBvbkNsaWNrOiBub29wLFxuICBvblJpZ2h0Q2xpY2s6IG5vb3AsXG4gIG9uRHJhZ1N0YXJ0OiBub29wLFxuICBvbkRyYWdNb3ZlOiBub29wLFxuICBvbkRyYWdFbmQ6IG5vb3AsXG4gIG9uRHJhZ0NhbmNlbDogbm9vcCxcbiAgb25Ub3VjaFN0YXJ0OiBub29wLFxuICBvblRvdWNoTW92ZTogbm9vcCxcbiAgb25Ub3VjaEVuZDogbm9vcCxcbiAgb25Ub3VjaENhbmNlbDogbm9vcCxcbiAgb25UYXA6IG5vb3AsXG4gIG9uTW91c2VNb3ZlOiBub29wLFxuICBvbk1vdXNlRW50ZXI6IG5vb3AsXG4gIG9uTW91c2VMZWF2ZTogbm9vcCxcbiAgb25Nb3VzZVdoZWVsOiBub29wLFxuICBvbktleURvd246IG5vb3AsXG4gIG9uS2V5VXA6IG5vb3Bcbn07XG5cbmV4cG9ydCBjb25zdCBLZXlzID0gS0VZUztcblxuZnVuY3Rpb24ga2V5T2YoY29kZSkge1xuICBjb25zdCBrZXlNYXAgPSBLZXlzO1xuICBmb3IgKGNvbnN0IG5hbWUgaW4ga2V5TWFwKSB7XG4gICAgaWYgKGtleU1hcFtuYW1lXSA9PT0gY29kZSkge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRzKGRvbUVsZW1lbnQsIG9wdCA9IHt9KSB7XG4gIG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUUywgb3B0KTtcblxuICBjb25zdCBiaW5kID0gb3B0LmJpbmQ7XG4gIGlmIChiaW5kKSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIG9wdCkge1xuICAgICAgaWYgKG5hbWUubWF0Y2goL15vblthLXpBLVowLTldKyQvKSkge1xuICAgICAgICAoKGZuYW1lLCBmbikgPT4ge1xuICAgICAgICAgIG9wdFtmbmFtZV0gPSBmdW5jdGlvbiBmKCkge1xuICAgICAgICAgICAgZm4uYXBwbHkoYmluZCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkobmFtZSwgb3B0W25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEV2ZW50c1Byb3h5KGRvbUVsZW1lbnQsIG9wdCk7XG59XG4iXX0=