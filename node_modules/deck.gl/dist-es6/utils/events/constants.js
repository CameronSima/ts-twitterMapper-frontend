import { Tap, Press, Pinch, Rotate, Pan, Swipe } from 'hammerjs';

/**
 * Only one set of basic input events will be fired by Hammer.js:
 * either pointer, touch, or mouse, depending on system support.
 * In order to enable an application to be agnostic of system support,
 * alias basic input events into "classes" of events: down, move, and up.
 * See `_onBasicInput()` for usage of these aliases.
 */
export var BASIC_EVENT_ALIASES = {
  pointerdown: 'pointerdown',
  pointermove: 'pointermove',
  pointerup: 'pointerup',
  touchstart: 'pointerdown',
  touchmove: 'pointermove',
  touchend: 'pointerup',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};

/**
 * "Gestural" events are those that have semantic meaning beyond the basic input event,
 * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.
 * Hammer.js handles these with its Recognizer system;
 * this block maps event names to the Recognizers required to detect the events.
 */
export var EVENT_RECOGNIZER_MAP = {
  click: 'tap',
  tap: 'tap',
  doubletap: 'doubletap',
  press: 'press',
  pinch: 'pinch',
  pinchin: 'pinch',
  pinchout: 'pinch',
  pinchstart: 'pinch',
  pinchmove: 'pinch',
  pinchend: 'pinch',
  pinchcancel: 'pinch',
  rotate: 'rotate',
  rotatestart: 'rotate',
  rotatemove: 'rotate',
  rotateend: 'rotate',
  rotatecancel: 'rotate',
  pan: 'pan',
  panstart: 'pan',
  panmove: 'pan',
  panup: 'pan',
  pandown: 'pan',
  panleft: 'pan',
  panright: 'pan',
  panend: 'pan',
  pancancel: 'pan',
  swipe: 'swipe',
  swipeleft: 'swipe',
  swiperight: 'swipe',
  swipeup: 'swipe',
  swipedown: 'swipe'
};

export var RECOGNIZERS = [[Rotate, { enable: false }], [Pinch, { enable: false }, ['rotate']], [Pan, { threshold: 10, enable: false }], [Swipe, { enable: false }], [Press, { enable: false }], [Tap, { event: 'doubletap', taps: 2, enable: false }], [Tap, { enable: false }]];

/**
 * Map gestural events typically provided by browsers
 * that are not reported in 'hammer.input' events
 * to corresponding Hammer.js gestures.
 */
export var GESTURE_EVENT_ALIASES = {
  click: 'tap',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9ldmVudHMvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIlRhcCIsIlByZXNzIiwiUGluY2giLCJSb3RhdGUiLCJQYW4iLCJTd2lwZSIsIkJBU0lDX0VWRU5UX0FMSUFTRVMiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIkVWRU5UX1JFQ09HTklaRVJfTUFQIiwiY2xpY2siLCJ0YXAiLCJkb3VibGV0YXAiLCJwcmVzcyIsInBpbmNoIiwicGluY2hpbiIsInBpbmNob3V0IiwicGluY2hzdGFydCIsInBpbmNobW92ZSIsInBpbmNoZW5kIiwicGluY2hjYW5jZWwiLCJyb3RhdGUiLCJyb3RhdGVzdGFydCIsInJvdGF0ZW1vdmUiLCJyb3RhdGVlbmQiLCJyb3RhdGVjYW5jZWwiLCJwYW4iLCJwYW5zdGFydCIsInBhbm1vdmUiLCJwYW51cCIsInBhbmRvd24iLCJwYW5sZWZ0IiwicGFucmlnaHQiLCJwYW5lbmQiLCJwYW5jYW5jZWwiLCJzd2lwZSIsInN3aXBlbGVmdCIsInN3aXBlcmlnaHQiLCJzd2lwZXVwIiwic3dpcGVkb3duIiwiUkVDT0dOSVpFUlMiLCJlbmFibGUiLCJ0aHJlc2hvbGQiLCJldmVudCIsInRhcHMiLCJHRVNUVVJFX0VWRU5UX0FMSUFTRVMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQ0VBLEdBREYsRUFFRUMsS0FGRixFQUdFQyxLQUhGLEVBSUVDLE1BSkYsRUFLRUMsR0FMRixFQU1FQyxLQU5GLFFBT08sVUFQUDs7QUFTQTs7Ozs7OztBQU9BLE9BQU8sSUFBTUMsc0JBQXNCO0FBQ2pDQyxlQUFhLGFBRG9CO0FBRWpDQyxlQUFhLGFBRm9CO0FBR2pDQyxhQUFXLFdBSHNCO0FBSWpDQyxjQUFZLGFBSnFCO0FBS2pDQyxhQUFXLGFBTHNCO0FBTWpDQyxZQUFVLFdBTnVCO0FBT2pDQyxhQUFXLGFBUHNCO0FBUWpDQyxhQUFXLGFBUnNCO0FBU2pDQyxXQUFTO0FBVHdCLENBQTVCOztBQVlQOzs7Ozs7QUFNQSxPQUFPLElBQU1DLHVCQUF1QjtBQUNsQ0MsU0FBTyxLQUQyQjtBQUVsQ0MsT0FBSyxLQUY2QjtBQUdsQ0MsYUFBVyxXQUh1QjtBQUlsQ0MsU0FBTyxPQUoyQjtBQUtsQ0MsU0FBTyxPQUwyQjtBQU1sQ0MsV0FBUyxPQU55QjtBQU9sQ0MsWUFBVSxPQVB3QjtBQVFsQ0MsY0FBWSxPQVJzQjtBQVNsQ0MsYUFBVyxPQVR1QjtBQVVsQ0MsWUFBVSxPQVZ3QjtBQVdsQ0MsZUFBYSxPQVhxQjtBQVlsQ0MsVUFBUSxRQVowQjtBQWFsQ0MsZUFBYSxRQWJxQjtBQWNsQ0MsY0FBWSxRQWRzQjtBQWVsQ0MsYUFBVyxRQWZ1QjtBQWdCbENDLGdCQUFjLFFBaEJvQjtBQWlCbENDLE9BQUssS0FqQjZCO0FBa0JsQ0MsWUFBVSxLQWxCd0I7QUFtQmxDQyxXQUFTLEtBbkJ5QjtBQW9CbENDLFNBQU8sS0FwQjJCO0FBcUJsQ0MsV0FBUyxLQXJCeUI7QUFzQmxDQyxXQUFTLEtBdEJ5QjtBQXVCbENDLFlBQVUsS0F2QndCO0FBd0JsQ0MsVUFBUSxLQXhCMEI7QUF5QmxDQyxhQUFXLEtBekJ1QjtBQTBCbENDLFNBQU8sT0ExQjJCO0FBMkJsQ0MsYUFBVyxPQTNCdUI7QUE0QmxDQyxjQUFZLE9BNUJzQjtBQTZCbENDLFdBQVMsT0E3QnlCO0FBOEJsQ0MsYUFBVztBQTlCdUIsQ0FBN0I7O0FBaUNQLE9BQU8sSUFBTUMsY0FBYyxDQUN6QixDQUFDNUMsTUFBRCxFQUFTLEVBQUM2QyxRQUFRLEtBQVQsRUFBVCxDQUR5QixFQUV6QixDQUFDOUMsS0FBRCxFQUFRLEVBQUM4QyxRQUFRLEtBQVQsRUFBUixFQUF5QixDQUFDLFFBQUQsQ0FBekIsQ0FGeUIsRUFHekIsQ0FBQzVDLEdBQUQsRUFBTSxFQUFDNkMsV0FBVyxFQUFaLEVBQWdCRCxRQUFRLEtBQXhCLEVBQU4sQ0FIeUIsRUFJekIsQ0FBQzNDLEtBQUQsRUFBUSxFQUFDMkMsUUFBUSxLQUFULEVBQVIsQ0FKeUIsRUFLekIsQ0FBQy9DLEtBQUQsRUFBUSxFQUFDK0MsUUFBUSxLQUFULEVBQVIsQ0FMeUIsRUFNekIsQ0FBQ2hELEdBQUQsRUFBTSxFQUFDa0QsT0FBTyxXQUFSLEVBQXFCQyxNQUFNLENBQTNCLEVBQThCSCxRQUFRLEtBQXRDLEVBQU4sQ0FOeUIsRUFPekIsQ0FBQ2hELEdBQUQsRUFBTSxFQUFDZ0QsUUFBUSxLQUFULEVBQU4sQ0FQeUIsQ0FBcEI7O0FBVVA7Ozs7O0FBS0EsT0FBTyxJQUFNSSx3QkFBd0I7QUFDbkNuQyxTQUFPLEtBRDRCO0FBRW5DSixhQUFXLGFBRndCO0FBR25DQyxhQUFXLGFBSHdCO0FBSW5DQyxXQUFTO0FBSjBCLENBQTlCIiwiZmlsZSI6ImNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFRhcCxcbiAgUHJlc3MsXG4gIFBpbmNoLFxuICBSb3RhdGUsXG4gIFBhbixcbiAgU3dpcGVcbn0gZnJvbSAnaGFtbWVyanMnO1xuXG4vKipcbiAqIE9ubHkgb25lIHNldCBvZiBiYXNpYyBpbnB1dCBldmVudHMgd2lsbCBiZSBmaXJlZCBieSBIYW1tZXIuanM6XG4gKiBlaXRoZXIgcG9pbnRlciwgdG91Y2gsIG9yIG1vdXNlLCBkZXBlbmRpbmcgb24gc3lzdGVtIHN1cHBvcnQuXG4gKiBJbiBvcmRlciB0byBlbmFibGUgYW4gYXBwbGljYXRpb24gdG8gYmUgYWdub3N0aWMgb2Ygc3lzdGVtIHN1cHBvcnQsXG4gKiBhbGlhcyBiYXNpYyBpbnB1dCBldmVudHMgaW50byBcImNsYXNzZXNcIiBvZiBldmVudHM6IGRvd24sIG1vdmUsIGFuZCB1cC5cbiAqIFNlZSBgX29uQmFzaWNJbnB1dCgpYCBmb3IgdXNhZ2Ugb2YgdGhlc2UgYWxpYXNlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IEJBU0lDX0VWRU5UX0FMSUFTRVMgPSB7XG4gIHBvaW50ZXJkb3duOiAncG9pbnRlcmRvd24nLFxuICBwb2ludGVybW92ZTogJ3BvaW50ZXJtb3ZlJyxcbiAgcG9pbnRlcnVwOiAncG9pbnRlcnVwJyxcbiAgdG91Y2hzdGFydDogJ3BvaW50ZXJkb3duJyxcbiAgdG91Y2htb3ZlOiAncG9pbnRlcm1vdmUnLFxuICB0b3VjaGVuZDogJ3BvaW50ZXJ1cCcsXG4gIG1vdXNlZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnLFxuICBtb3VzZXVwOiAncG9pbnRlcnVwJ1xufTtcblxuLyoqXG4gKiBcIkdlc3R1cmFsXCIgZXZlbnRzIGFyZSB0aG9zZSB0aGF0IGhhdmUgc2VtYW50aWMgbWVhbmluZyBiZXlvbmQgdGhlIGJhc2ljIGlucHV0IGV2ZW50LFxuICogZS5nLiBhIGNsaWNrIG9yIHRhcCBpcyBhIHNlcXVlbmNlIG9mIGBkb3duYCBhbmQgYHVwYCBldmVudHMgd2l0aCBubyBgbW92ZWAgZXZlbnQgaW4gYmV0d2Vlbi5cbiAqIEhhbW1lci5qcyBoYW5kbGVzIHRoZXNlIHdpdGggaXRzIFJlY29nbml6ZXIgc3lzdGVtO1xuICogdGhpcyBibG9jayBtYXBzIGV2ZW50IG5hbWVzIHRvIHRoZSBSZWNvZ25pemVycyByZXF1aXJlZCB0byBkZXRlY3QgdGhlIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IEVWRU5UX1JFQ09HTklaRVJfTUFQID0ge1xuICBjbGljazogJ3RhcCcsXG4gIHRhcDogJ3RhcCcsXG4gIGRvdWJsZXRhcDogJ2RvdWJsZXRhcCcsXG4gIHByZXNzOiAncHJlc3MnLFxuICBwaW5jaDogJ3BpbmNoJyxcbiAgcGluY2hpbjogJ3BpbmNoJyxcbiAgcGluY2hvdXQ6ICdwaW5jaCcsXG4gIHBpbmNoc3RhcnQ6ICdwaW5jaCcsXG4gIHBpbmNobW92ZTogJ3BpbmNoJyxcbiAgcGluY2hlbmQ6ICdwaW5jaCcsXG4gIHBpbmNoY2FuY2VsOiAncGluY2gnLFxuICByb3RhdGU6ICdyb3RhdGUnLFxuICByb3RhdGVzdGFydDogJ3JvdGF0ZScsXG4gIHJvdGF0ZW1vdmU6ICdyb3RhdGUnLFxuICByb3RhdGVlbmQ6ICdyb3RhdGUnLFxuICByb3RhdGVjYW5jZWw6ICdyb3RhdGUnLFxuICBwYW46ICdwYW4nLFxuICBwYW5zdGFydDogJ3BhbicsXG4gIHBhbm1vdmU6ICdwYW4nLFxuICBwYW51cDogJ3BhbicsXG4gIHBhbmRvd246ICdwYW4nLFxuICBwYW5sZWZ0OiAncGFuJyxcbiAgcGFucmlnaHQ6ICdwYW4nLFxuICBwYW5lbmQ6ICdwYW4nLFxuICBwYW5jYW5jZWw6ICdwYW4nLFxuICBzd2lwZTogJ3N3aXBlJyxcbiAgc3dpcGVsZWZ0OiAnc3dpcGUnLFxuICBzd2lwZXJpZ2h0OiAnc3dpcGUnLFxuICBzd2lwZXVwOiAnc3dpcGUnLFxuICBzd2lwZWRvd246ICdzd2lwZSdcbn07XG5cbmV4cG9ydCBjb25zdCBSRUNPR05JWkVSUyA9IFtcbiAgW1JvdGF0ZSwge2VuYWJsZTogZmFsc2V9XSxcbiAgW1BpbmNoLCB7ZW5hYmxlOiBmYWxzZX0sIFsncm90YXRlJ11dLFxuICBbUGFuLCB7dGhyZXNob2xkOiAxMCwgZW5hYmxlOiBmYWxzZX1dLFxuICBbU3dpcGUsIHtlbmFibGU6IGZhbHNlfV0sXG4gIFtQcmVzcywge2VuYWJsZTogZmFsc2V9XSxcbiAgW1RhcCwge2V2ZW50OiAnZG91YmxldGFwJywgdGFwczogMiwgZW5hYmxlOiBmYWxzZX1dLFxuICBbVGFwLCB7ZW5hYmxlOiBmYWxzZX1dXG5dO1xuXG4vKipcbiAqIE1hcCBnZXN0dXJhbCBldmVudHMgdHlwaWNhbGx5IHByb3ZpZGVkIGJ5IGJyb3dzZXJzXG4gKiB0aGF0IGFyZSBub3QgcmVwb3J0ZWQgaW4gJ2hhbW1lci5pbnB1dCcgZXZlbnRzXG4gKiB0byBjb3JyZXNwb25kaW5nIEhhbW1lci5qcyBnZXN0dXJlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IEdFU1RVUkVfRVZFTlRfQUxJQVNFUyA9IHtcbiAgY2xpY2s6ICd0YXAnLFxuICBtb3VzZWRvd246ICdwb2ludGVyZG93bicsXG4gIG1vdXNlbW92ZTogJ3BvaW50ZXJtb3ZlJyxcbiAgbW91c2V1cDogJ3BvaW50ZXJ1cCdcbn07XG4iXX0=