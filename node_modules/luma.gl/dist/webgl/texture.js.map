{"version":3,"sources":["../../src/webgl/texture.js"],"names":["NPOT_MIN_FILTERS","LINEAR","NEAREST","TEXTURE_FORMATS","RGB","dataFormat","types","UNSIGNED_BYTE","UNSIGNED_SHORT_5_6_5","RGBA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","ALPHA","LUMINANCE","LUMINANCE_ALPHA","isFormatSupported","gl","format","info","gl1","undefined","gl2","value","getExtension","isLinearFilteringSupported","FLOAT","HALF_FLOAT","Texture","linearFiltering","supported","opts","id","handle","target","hasFloatTexture","textureUnit","width","height","data","pixels","type","border","recreate","parameters","pixelStore","unpackFlipY","generateMipmaps","mipmaps","deprecated","_deduceParameters","compressed","DEFAULT_TEXTURE_SETTINGS","UNPACK_FLIP_Y_WEBGL","glSettings","Object","assign","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","updatedParameters","_applyV3Options","setParameters","initialize","params","bindTexture","x","y","level","offset","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","bindBuffer","PIXEL_UNPACK_BUFFER","GL_PIXEL_UNPACK_BUFFER","framebuffer","internalFormat","bind","copyTexImage2D","unbind","getParameter","ACTIVE_TEXTURE","TEXTURE0","Error","activeTexture","dataType","_getDataType","texImage2D","compressedTexImage2D","internalformat","depth","texImage3D","textureFormat","_deduceImageSize","v4Parameters","TEXTURE_MAG_FILTER","magFilter","TEXTURE_MIN_FILTER","minFilter","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","pname","TEXTURE_WIDTH","TEXTURE_HEIGHT","getTexParameter","param","_getNPOTParam","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","texParameterf","texParameteri","CLAMP_TO_EDGE","indexOf"],"mappings":"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","file":"texture.js","sourcesContent":["/* eslint-disable no-inline-comments, max-len */\nimport GL from './gl-constants';\nimport {WebGLBuffer} from './api';\nimport {isWebGL, ERR_WEBGL, isWebGL2, ERR_WEBGL2} from './context';\nimport {withParameters} from './context-state';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {uid, isPowerOfTwo, log} from '../utils';\nimport assert from 'assert';\nimport {glKey} from './gl-constants';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  [GL.RGBA]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]},\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nfunction isFormatSupported(gl, format) {\n  assert(isWebGL(gl), ERR_WEBGL);\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) { // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nfunction isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n  // Both WebGL1 and WebGL2?\n  case GL.FLOAT: return gl.getExtension('OES_texture_float_linear');\n  // Not in WebGL2?\n  case GL.HALF_FLOAT: return gl.getExtension('OES_texture_half_float_linear');\n  default: return true;\n  }\n}\n\nexport default class Texture extends Resource {\n\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    assert(isWebGL(gl), ERR_WEBGL);\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, opts) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = opts;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.hasFloatTexture = gl.getExtension('OES_texture_float');\n    this.textureUnit = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    let data = opts.data;\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      // Deprecated parameters\n      unpackFlipY = true,\n      generateMipmaps\n    } = opts;\n\n    let {mipmaps = true} = opts;\n\n    if (generateMipmaps !== undefined) {\n      log.deprecated('generateMipmaps', 'mipmaps');\n      mipmaps = generateMipmaps;\n    }\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    let {width, height, dataFormat} = opts;\n\n    // Deduce width and height\n    ({width, height, dataFormat} = this._deduceParameters({\n      format, type, dataFormat, compressed: false, data, width, height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.mipmaps = mipmaps;\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (this._isNPOT()) {\n\n      log.warn(0, `texture: ${this} is Non-Power-Of-Two, disabling mipmaping`);\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    // Temporarily apply any pixel store settings and build textures\n    withParameters(this.gl, glSettings, () => {\n      this.setImageData({data, width, height, format, type, dataFormat, border, mipmaps});\n    });\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Append any v3 style parameters\n    const updatedParameters = this._applyV3Options(parameters, opts);\n\n    // Set texture sampler parameters\n    this.setParameters(updatedParameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({width, height}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps: false\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  subImage({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    compressed = false,\n    offset = 0,\n    border = 0\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    // TODO - x,y parameters\n    if (compressed) {\n      this.gl.compressedTexSubImage2D(target,\n        level, x, y, width, height, format, data);\n    } else if (data === null) {\n      this.gl.texSubImage2D(target,\n        level, format, width, height, border, dataFormat, type, null);\n    } else if (ArrayBuffer.isView(data)) {\n      this.gl.texSubImage2D(target,\n        level, format, width, height, border, dataFormat, type, data);\n    } else if (data instanceof WebGLBuffer) {\n      // WebGL2 allows us to create texture directly from a WebGL buffer\n      assert(isWebGL2(this.gl), ERR_WEBGL2);\n      // This texImage2D signature uses currently bound GL_PIXEL_UNPACK_BUFFER\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n      this.gl.texSubImage2D(target,\n        level, format, width, height, border, format, type, offset);\n      this.gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);\n    } else {\n      // Assume data is a browser supported object (ImageData, Canvas, ...)\n      this.gl.texSubImage2D(target, level, x, y, format, type, data);\n    }\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer({\n    target = this.target,\n    framebuffer,\n    offset = 0,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    internalFormat = GL.RGBA,\n    border = 0\n  }) {\n    if (framebuffer) {\n      framebuffer.bind();\n    }\n\n    // target\n    this.bind();\n    this.gl.copyTexImage2D(\n      this.target, level, internalFormat, x, y, width, height, border);\n    this.unbind();\n\n    if (framebuffer) {\n      framebuffer.unbind();\n    }\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    if (textureUnit === undefined) {\n      throw new Error('Texture.bind: must specify texture unit');\n    }\n    this.textureUnit = textureUnit;\n    this.gl.activeTexture(GL.TEXTURE0 + textureUnit);\n    this.gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    if (this.textureUnit === undefined) {\n      throw new Error('Texture.unbind: texture unit not specified');\n    }\n    this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    return this.textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    offset = 0,\n    border = 0,\n    compressed = false\n  }) {\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n    switch (dataType) {\n    case 'typed-array':\n    case 'null':\n      gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n      break;\n    case 'buffer':\n      // WebGL2 enables creating textures directly from a WebGL buffer\n      assert(isWebGL2(gl), ERR_WEBGL2);\n      gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n      gl.texImage2D(target, level, format, width, height, border, format, type, offset);\n      break;\n    case 'browser-object':\n      gl.texImage2D(target, level, format, format, type, data);\n      break;\n    case 'compressed':\n      gl.compressedTexImage2D(this.target, level, format, width, height, border, data);\n      break;\n    default:\n      assert(false, 'Unknown image data type');\n    }\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return this;\n    }\n\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, offset);\n    }\n\n    return this;\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL_PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize({data, width, height}));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // Convert and append any v3 style parameters\n  _applyV3Options(parameters, opts) {\n    const v4Parameters = Object.assign({}, parameters);\n\n    if ('magFilter' in opts) {\n      v4Parameters[GL.TEXTURE_MAG_FILTER] = opts.magFilter;\n      log.deprecated('magFilter', 'TEXTURE_MAG_FILTER');\n    }\n    if ('minFilter' in opts) {\n      v4Parameters[GL.TEXTURE_MIN_FILTER] = opts.minFilter;\n      log.deprecated('minFilter', 'TEXTURE_MIN_FILTER');\n    }\n    if ('wrapS' in opts) {\n      v4Parameters[GL.TEXTURE_WRAP_S] = opts.wrapS;\n      log.deprecated('wrapS', 'TEXTURE_WRAP_S');\n    }\n    if ('wrapT' in opts) {\n      v4Parameters[GL.TEXTURE_WRAP_T] = opts.wrapT;\n      log.deprecated('wrapT', 'TEXTURE_WRAP_T');\n    }\n\n    return v4Parameters;\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */\n  _deduceImageSize({data, width, height}) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n    case GL.TEXTURE_WIDTH:\n      return this.width;\n    case GL.TEXTURE_HEIGHT:\n      return this.height;\n    default:\n      this.gl.bindTexture(this.target, this.handle);\n      const value = this.gl.getTexParameter(this.target, pname);\n      this.gl.bindTexture(this.target, null);\n      return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n    case GL.TEXTURE_MIN_LOD:\n    case GL.TEXTURE_MAX_LOD:\n      this.gl.texParameterf(this.handle, pname, param);\n      break;\n\n    case GL.TEXTURE_WIDTH:\n    case GL.TEXTURE_HEIGHT:\n      throw new Error('Cannot set emulated parameter');\n\n    default:\n      this.gl.texParameteri(this.target, pname, param);\n      break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    return (!isWebGL2(this.gl) && (!isPowerOfTwo(this.width) || (!isPowerOfTwo(this.height))));\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      log.warn(0, `texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`);\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      log.warn(0, `texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`);\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      log.warn(0, `texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`);\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n      case GL.TEXTURE_MIN_FILTER:\n        if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n          log.warn(0, `texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`);\n          param = GL.LINEAR;\n        }\n        break;\n      case GL.TEXTURE_WRAP_S:\n      case GL.TEXTURE_WRAP_T:\n        if (param !== GL.CLAMP_TO_EDGE) {\n          log.warn(0, `texture: ${this} is Non-Power-Of-Two, ${glKey(pname)} to CLAMP_TO_EDGE`);\n          param = GL.CLAMP_TO_EDGE;\n        }\n        break;\n      default:\n        break;\n      }\n    }\n    return param;\n  }\n}\n"]}