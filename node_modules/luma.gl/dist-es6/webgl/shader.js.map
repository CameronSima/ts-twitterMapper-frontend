{"version":3,"sources":["../../src/webgl/shader.js"],"names":["GL","formatGLSLCompilerError","getShaderName","assertWebGLContext","Resource","uid","assert","ERR_SOURCE","Shader","shaderType","VERTEX_SHADER","FRAGMENT_SHADER","gl","source","id","getTypeName","opts","initialize","shaderName","_compile","pname","getShaderParameter","handle","getShaderSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","getParameter","COMPILE_STATUS","infoLog","getShaderInfoLog","error","Error","deleteShader","type","SHADER_TYPE","getSource","VertexShader","createShader","FragmentShader"],"mappings":";;;;;;;;AAAA,OAAOA,EAAP,IAAYC,uBAAZ,EAAqCC,aAArC,QAAyD,OAAzD;AACA,SAAQC,kBAAR,QAAiC,WAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,GAAR,QAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,aAAa,sDAAnB;;AAEA;AACA,WAAaC,MAAb;AAAA;;AAAA;AAAA;AAAA,gCAEqBC,UAFrB,EAEiC;AAC7B,cAAQA,UAAR;AACA,aAAKT,GAAGU,aAAR;AAAuB,iBAAO,eAAP;AACvB,aAAKV,GAAGW,eAAR;AAAyB,iBAAO,iBAAP;AACzB;AAAS,iBAAO,gBAAP;AAHT;AAKD;;AAED;;AAVF;;AAWE,kBAAYC,EAAZ,EAAgBC,MAAhB,EAAwBJ,UAAxB,EAAoC;AAAA;;AAClCN,uBAAmBS,EAAnB;AACAN,WAAO,OAAOO,MAAP,KAAkB,QAAzB,EAAmCN,UAAnC;;AAFkC,gHAI5BK,EAJ4B,EAIxB,EAACE,IAAIZ,cAAcW,MAAd,KAAyBR,IAAIG,OAAOO,WAAP,CAAmBN,UAAnB,CAAJ,CAA9B,EAJwB;;AAMlC,UAAKA,UAAL,GAAkBA,UAAlB;AACA,UAAKI,MAAL,GAAcA,MAAd;;AAEA,UAAKG,IAAL,CAAUH,MAAV,GAAmBA,MAAnB;AACA,UAAKI,UAAL,CAAgB,MAAKD,IAArB;AAVkC;AAWnC;;AAtBH;AAAA;AAAA,qCAwBuB;AAAA,UAATH,MAAS,QAATA,MAAS;;AACnB,UAAMK,aAAahB,cAAcW,MAAd,CAAnB;AACA,UAAIK,UAAJ,EAAgB;AACd,aAAKJ,EAAL,GAAUT,IAAIa,UAAJ,CAAV;AACD;AACD,WAAKC,QAAL,CAAcN,MAAd;AACA,WAAKG,IAAL,CAAUH,MAAV,GAAmBA,MAAnB;AACD;;AAED;;AAjCF;AAAA;AAAA,iCAmCeO,KAnCf,EAmCsB;AAClB,aAAO,KAAKR,EAAL,CAAQS,kBAAR,CAA2B,KAAKC,MAAhC,EAAwCF,KAAxC,CAAP;AACD;AArCH;AAAA;AAAA,+BAuCa;AACT,aAAU,KAAKL,WAAL,CAAiB,KAAKN,UAAtB,CAAV,SAA+C,KAAKK,EAApD;AACD;AAzCH;AAAA;AAAA,8BA2CY;AACR,aAAOZ,cAAc,KAAKc,IAAL,CAAUH,MAAxB,KAAmC,gBAA1C;AACD;AA7CH;AAAA;AAAA,gCA+Cc;AACV,aAAO,KAAKD,EAAL,CAAQW,eAAR,CAAwB,KAAKD,MAA7B,CAAP;AACD;;AAED;;AAnDF;AAAA;AAAA,0CAoDwB;AACpB,UAAME,YAAY,KAAKZ,EAAL,CAAQa,YAAR,CAAqB,qBAArB,CAAlB;AACA,aAAOD,YACLA,UAAUE,yBAAV,CAAoC,KAAKJ,MAAzC,CADK,GAEL,qEAFF;AAGD;;AAED;;AA3DF;AAAA;AAAA,+BA4Da;AACT,WAAKV,EAAL,CAAQe,YAAR,CAAqB,KAAKL,MAA1B,EAAkC,KAAKT,MAAvC;AACA,WAAKD,EAAL,CAAQgB,aAAR,CAAsB,KAAKN,MAA3B;;AAEA;AACA;AACA;AACA;AACA,UAAMO,gBAAgB,KAAKC,YAAL,CAAkB9B,GAAG+B,cAArB,CAAtB;AACA,UAAI,CAACF,aAAL,EAAoB;AAClB,YAAMG,UAAU,KAAKpB,EAAL,CAAQqB,gBAAR,CAAyB,KAAKX,MAA9B,CAAhB;AACA,YAAMY,QAAQjC,wBAAwB+B,OAAxB,EAAiC,KAAKnB,MAAtC,EAA8C,KAAKJ,UAAnD,CAAd;AACA,cAAM,IAAI0B,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF;AA1EH;AAAA;AAAA,oCA4EkB;AACd,WAAKtB,EAAL,CAAQwB,YAAR,CAAqB,KAAKd,MAA1B;AACD;AA9EH;AAAA;AAAA,yCAgFuB;AACnB,aAAO;AACLe,cAAM,KAAKP,YAAL,CAAkB9B,GAAGsC,WAArB,CADD;AAELzB,gBAAQ,KAAK0B,SAAL;AAFH,OAAP;AAID;AArFH;;AAAA;AAAA,EAA4BnC,QAA5B;;AAwFA,WAAaoC,YAAb;AAAA;;AACE,wBAAY5B,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AAAA,uHAChBD,EADgB,EACZC,MADY,EACJb,GAAGU,aADC;AAEvB;;AAED;;;AALF;AAAA;AAAA,oCAMkB;AACd,aAAO,KAAKE,EAAL,CAAQ6B,YAAR,CAAqBzC,GAAGU,aAAxB,CAAP;AACD;AARH;;AAAA;AAAA,EAAkCF,MAAlC;;AAWA,WAAakC,cAAb;AAAA;;AACE,0BAAY9B,EAAZ,EAAgBC,MAAhB,EAAwB;AAAA;;AAAA,2HAChBD,EADgB,EACZC,MADY,EACJb,GAAGW,eADC;AAEvB;;AAED;;;AALF;AAAA;AAAA,oCAMkB;AACd,aAAO,KAAKC,EAAL,CAAQ6B,YAAR,CAAqBzC,GAAGW,eAAxB,CAAP;AACD;AARH;;AAAA;AAAA,EAAoCH,MAApC","file":"shader.js","sourcesContent":["import GL, {formatGLSLCompilerError, getShaderName} from './api';\nimport {assertWebGLContext} from './context';\nimport Resource from './resource';\nimport {uid} from '../utils';\nimport assert from 'assert';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n    case GL.VERTEX_SHADER: return 'vertex-shader';\n    case GL.FRAGMENT_SHADER: return 'fragment-shader';\n    default: return 'unknown-shader';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, source, shaderType) {\n    assertWebGLContext(gl);\n    assert(typeof source === 'string', ERR_SOURCE);\n\n    super(gl, {id: getShaderName(source) || uid(Shader.getTypeName(shaderType))});\n\n    this.shaderType = shaderType;\n    this.source = source;\n\n    this.opts.source = source;\n    this.initialize(this.opts);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n    this.opts.source = source;\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${this.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.opts.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ?\n      extension.getTranslatedShaderSource(this.handle) :\n      'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // Avoid checking shader compilation errors on production\n    // if (this.gl.debug || log.priority > 0) {\n    // }\n    // Throw if compilation failed\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const error = formatGLSLCompilerError(infoLog, this.source, this.shaderType);\n      throw new Error(error);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL.VERTEX_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL.FRAGMENT_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"]}