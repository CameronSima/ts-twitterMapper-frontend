'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkArguments = checkArguments;
exports.validateVector2 = validateVector2;
exports.checkVector2 = checkVector2;
exports.validateVector3 = validateVector3;
exports.checkVector3 = checkVector3;
exports.validateVector4 = validateVector4;
exports.checkVector4 = checkVector4;
exports.validateQuaternion = validateQuaternion;
exports.checkQuaternion = checkQuaternion;
exports.validateMatrix2 = validateMatrix2;
exports.checkMatrix2 = checkMatrix2;
exports.validateMatrix2d = validateMatrix2d;
exports.checkMatrix2d = checkMatrix2d;
exports.validateMatrix3 = validateMatrix3;
exports.checkMatrix3 = checkMatrix3;
exports.validateMatrix4 = validateMatrix4;
exports.checkMatrix4 = checkMatrix4;

var _common = require('../common');

function checkArguments() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  for (var i = 0; i < args.length; ++i) {
    if (args[i] === undefined) {
      throw new Error('Invalid math argument');
    }
  }
}

function validateVector2(v) {
  return v.length === 2 && Number.isFinite(v[0]) && Number.isFinite(v[1]);
}

function checkVector2(v) {
  if (_common.glMatrix.debug && !validateVector2(v)) {
    throw new Error('Invalid Vector2');
  }
}

function validateVector3(v) {
  return v.length === 3 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]);
}

function checkVector3(v) {
  if (_common.glMatrix.debug && !validateVector3(v)) {
    throw new Error('Invalid Vector3');
  }
}

function validateVector4(v) {
  return v.length === 4 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]) && Number.isFinite(v[3]);
}

function checkVector4(v) {
  if (_common.glMatrix.debug && !validateVector4(v)) {
    throw new Error('Invalid Vector4');
  }
}

function validateQuaternion(q) {
  return q.length === 4 && Number.isFinite(q[0]) && Number.isFinite(q[1]) && Number.isFinite(q[2]) && Number.isFinite(q[3]);
}

function checkQuaternion(q) {
  if (_common.glMatrix.debug && !validateQuaternion(q)) {
    throw new Error('Invalid Quaternion');
  }
}

function validateMatrix2(m) {
  return m.length === 4 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]);
}

function checkMatrix2(m) {
  if (_common.glMatrix.debug && !validateMatrix2(m)) {
    throw new Error('Invalid Matrix2');
  }
}

function validateMatrix2d(m) {
  return m.length === 6 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]);
}

function checkMatrix2d(m) {
  if (_common.glMatrix.debug && !validateMatrix2d(m)) {
    throw new Error('Invalid Matrix2d');
  }
}

function validateMatrix3(m) {
  return m.length === 9 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]);
}

function checkMatrix3(m) {
  if (_common.glMatrix.debug && !validateMatrix3(m)) {
    throw new Error('Invalid Matrix3');
  }
}

function validateMatrix4(m) {
  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);
}

function checkMatrix4(m) {
  if (_common.glMatrix.debug && !validateMatrix4(m)) {
    throw new Error('Invalid Matrix4');
  }
}
//# sourceMappingURL=validators.js.map