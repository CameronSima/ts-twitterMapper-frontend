{"version":3,"sources":["../../../../src/packages/math/src/vector3.js"],"names":["MathArray","checkNumber","vec3_set","vec3_length","vec3_distance","vec3_angle","vec3_add","vec3_subtract","vec3_multiply","vec3_divide","vec3_scale","vec3_scaleAndAdd","vec3_negate","vec3_inverse","vec3_normalize","vec3_dot","vec3_cross","vec3_lerp","Vector3","x","y","z","Array","isArray","arguments","length","copy","set","check","vector","vectors","scale","Number","isFinite","operation","args","value"],"mappings":"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","file":"vector3.js","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n\n// gl-matrix is a big library. Cherry-pick individual imports from stack.gl version\n// import {vec3} from 'gl-matrix';\n/* eslint-disable camelcase */\nimport vec3_set from 'gl-vec3/set';\nimport vec3_length from 'gl-vec3/add';\nimport vec3_distance from 'gl-vec3/add';\nimport vec3_angle from 'gl-vec3/add';\nimport vec3_add from 'gl-vec3/add';\nimport vec3_subtract from 'gl-vec3/subtract';\nimport vec3_multiply from 'gl-vec3/multiply';\nimport vec3_divide from 'gl-vec3/divide';\nimport vec3_scale from 'gl-vec3/scale';\nimport vec3_scaleAndAdd from 'gl-vec3/scaleAndAdd';\nimport vec3_negate from 'gl-vec3/negate';\nimport vec3_inverse from 'gl-vec3/inverse';\nimport vec3_normalize from 'gl-vec3/normalize';\nimport vec3_dot from 'gl-vec3/dot';\nimport vec3_cross from 'gl-vec3/cross';\nimport vec3_lerp from 'gl-vec3/lerp';\n\nexport default class Vector3 extends MathArray {\n  // Creates a new vec3, either empty, or from an array or from values\n  constructor(x = 0, y = 0, z = 0) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z);\n    }\n  }\n\n  // fromArray(array) {\n  //   if (array instanceof Vector3) {\n  //     return array;\n  //   }\n  //   return new Vector3(...array);\n  // }\n\n  set(x, y, z) {\n    vec3_set(this, x, y, z);\n    this.check();\n    return this;\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() { return 3; }\n  get x()      { return this[0]; }\n  set x(value) { return this[0] = checkNumber(value); }\n  get y()      { return this[1]; }\n  set y(value) { return this[1] = checkNumber(value); }\n  get z()      { return this[2]; }\n  set z(value) { return this[2] = checkNumber(value); }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  length() {\n    return vec3_length(this);\n  }\n\n  distance(vector) {\n    return vec3_distance(this. vector);\n  }\n\n  angle(vector) {\n    return vec3_angle(this, vector);\n  }\n\n  // MODIFIERS\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      vec3_add(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      vec3_subtract(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      vec3_multiply(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      vec3_divide(this, vector);\n    }\n    this.check();\n    return this;\n  }\n\n  scale(scale) {\n    if (Number.isFinite(scale)) {\n      vec3_scale(this, this, scale);\n    } else {\n      vec3_dot(this, this, scale);\n    }\n    this.check();\n    return this;\n  }\n\n  scaleAndAdd(vector, scale) {\n    vec3_scaleAndAdd(this, this, vector, scale);\n    this.check();\n    return this;\n  }\n\n  negate() {\n    vec3_negate(this, this);\n    this.check();\n    return this;\n  }\n\n  inverse() {\n    vec3_inverse(this, this);\n    this.check();\n    return this;\n  }\n\n  normalize() {\n    vec3_normalize(this, this);\n    this.check();\n    return this;\n  }\n\n  dot(vector) {\n    vec3_dot(this, this, vector);\n    this.check();\n    return this;\n  }\n\n  cross(vector) {\n    vec3_cross(this, this, vector);\n    this.check();\n    return this;\n  }\n\n  lerp(scale) {\n    vec3_lerp(this, this, scale);\n    this.check();\n    return this;\n  }\n\n  operation(operation, ...args) {\n    operation(this, this, ...args);\n    this.check();\n    return this;\n  }\n}\n"]}