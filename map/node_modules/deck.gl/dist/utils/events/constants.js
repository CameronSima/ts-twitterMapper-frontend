'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GESTURE_EVENT_ALIASES = exports.RECOGNIZERS = exports.EVENT_RECOGNIZER_MAP = exports.BASIC_EVENT_ALIASES = undefined;

var _hammerjs = require('hammerjs');

/**
 * Only one set of basic input events will be fired by Hammer.js:
 * either pointer, touch, or mouse, depending on system support.
 * In order to enable an application to be agnostic of system support,
 * alias basic input events into "classes" of events: down, move, and up.
 * See `_onBasicInput()` for usage of these aliases.
 */
var BASIC_EVENT_ALIASES = exports.BASIC_EVENT_ALIASES = {
  pointerdown: 'pointerdown',
  pointermove: 'pointermove',
  pointerup: 'pointerup',
  touchstart: 'pointerdown',
  touchmove: 'pointermove',
  touchend: 'pointerup',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};

/**
 * "Gestural" events are those that have semantic meaning beyond the basic input event,
 * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.
 * Hammer.js handles these with its Recognizer system;
 * this block maps event names to the Recognizers required to detect the events.
 */
var EVENT_RECOGNIZER_MAP = exports.EVENT_RECOGNIZER_MAP = {
  click: 'tap',
  tap: 'tap',
  doubletap: 'doubletap',
  press: 'press',
  pinch: 'pinch',
  pinchin: 'pinch',
  pinchout: 'pinch',
  pinchstart: 'pinch',
  pinchmove: 'pinch',
  pinchend: 'pinch',
  pinchcancel: 'pinch',
  rotate: 'rotate',
  rotatestart: 'rotate',
  rotatemove: 'rotate',
  rotateend: 'rotate',
  rotatecancel: 'rotate',
  pan: 'pan',
  panstart: 'pan',
  panmove: 'pan',
  panup: 'pan',
  pandown: 'pan',
  panleft: 'pan',
  panright: 'pan',
  panend: 'pan',
  pancancel: 'pan',
  swipe: 'swipe',
  swipeleft: 'swipe',
  swiperight: 'swipe',
  swipeup: 'swipe',
  swipedown: 'swipe'
};

var RECOGNIZERS = exports.RECOGNIZERS = [[_hammerjs.Rotate, { enable: false }], [_hammerjs.Pinch, { enable: false }, ['rotate']], [_hammerjs.Pan, { threshold: 10, enable: false }], [_hammerjs.Swipe, { enable: false }], [_hammerjs.Press, { enable: false }], [_hammerjs.Tap, { event: 'doubletap', taps: 2, enable: false }], [_hammerjs.Tap, { enable: false }]];

/**
 * Map gestural events typically provided by browsers
 * that are not reported in 'hammer.input' events
 * to corresponding Hammer.js gestures.
 */
var GESTURE_EVENT_ALIASES = exports.GESTURE_EVENT_ALIASES = {
  click: 'tap',
  mousedown: 'pointerdown',
  mousemove: 'pointermove',
  mouseup: 'pointerup'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9ldmVudHMvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIkJBU0lDX0VWRU5UX0FMSUFTRVMiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIkVWRU5UX1JFQ09HTklaRVJfTUFQIiwiY2xpY2siLCJ0YXAiLCJkb3VibGV0YXAiLCJwcmVzcyIsInBpbmNoIiwicGluY2hpbiIsInBpbmNob3V0IiwicGluY2hzdGFydCIsInBpbmNobW92ZSIsInBpbmNoZW5kIiwicGluY2hjYW5jZWwiLCJyb3RhdGUiLCJyb3RhdGVzdGFydCIsInJvdGF0ZW1vdmUiLCJyb3RhdGVlbmQiLCJyb3RhdGVjYW5jZWwiLCJwYW4iLCJwYW5zdGFydCIsInBhbm1vdmUiLCJwYW51cCIsInBhbmRvd24iLCJwYW5sZWZ0IiwicGFucmlnaHQiLCJwYW5lbmQiLCJwYW5jYW5jZWwiLCJzd2lwZSIsInN3aXBlbGVmdCIsInN3aXBlcmlnaHQiLCJzd2lwZXVwIiwic3dpcGVkb3duIiwiUkVDT0dOSVpFUlMiLCJlbmFibGUiLCJ0aHJlc2hvbGQiLCJldmVudCIsInRhcHMiLCJHRVNUVVJFX0VWRU5UX0FMSUFTRVMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFTQTs7Ozs7OztBQU9PLElBQU1BLG9EQUFzQjtBQUNqQ0MsZUFBYSxhQURvQjtBQUVqQ0MsZUFBYSxhQUZvQjtBQUdqQ0MsYUFBVyxXQUhzQjtBQUlqQ0MsY0FBWSxhQUpxQjtBQUtqQ0MsYUFBVyxhQUxzQjtBQU1qQ0MsWUFBVSxXQU51QjtBQU9qQ0MsYUFBVyxhQVBzQjtBQVFqQ0MsYUFBVyxhQVJzQjtBQVNqQ0MsV0FBUztBQVR3QixDQUE1Qjs7QUFZUDs7Ozs7O0FBTU8sSUFBTUMsc0RBQXVCO0FBQ2xDQyxTQUFPLEtBRDJCO0FBRWxDQyxPQUFLLEtBRjZCO0FBR2xDQyxhQUFXLFdBSHVCO0FBSWxDQyxTQUFPLE9BSjJCO0FBS2xDQyxTQUFPLE9BTDJCO0FBTWxDQyxXQUFTLE9BTnlCO0FBT2xDQyxZQUFVLE9BUHdCO0FBUWxDQyxjQUFZLE9BUnNCO0FBU2xDQyxhQUFXLE9BVHVCO0FBVWxDQyxZQUFVLE9BVndCO0FBV2xDQyxlQUFhLE9BWHFCO0FBWWxDQyxVQUFRLFFBWjBCO0FBYWxDQyxlQUFhLFFBYnFCO0FBY2xDQyxjQUFZLFFBZHNCO0FBZWxDQyxhQUFXLFFBZnVCO0FBZ0JsQ0MsZ0JBQWMsUUFoQm9CO0FBaUJsQ0MsT0FBSyxLQWpCNkI7QUFrQmxDQyxZQUFVLEtBbEJ3QjtBQW1CbENDLFdBQVMsS0FuQnlCO0FBb0JsQ0MsU0FBTyxLQXBCMkI7QUFxQmxDQyxXQUFTLEtBckJ5QjtBQXNCbENDLFdBQVMsS0F0QnlCO0FBdUJsQ0MsWUFBVSxLQXZCd0I7QUF3QmxDQyxVQUFRLEtBeEIwQjtBQXlCbENDLGFBQVcsS0F6QnVCO0FBMEJsQ0MsU0FBTyxPQTFCMkI7QUEyQmxDQyxhQUFXLE9BM0J1QjtBQTRCbENDLGNBQVksT0E1QnNCO0FBNkJsQ0MsV0FBUyxPQTdCeUI7QUE4QmxDQyxhQUFXO0FBOUJ1QixDQUE3Qjs7QUFpQ0EsSUFBTUMsb0NBQWMsQ0FDekIsbUJBQVMsRUFBQ0MsUUFBUSxLQUFULEVBQVQsQ0FEeUIsRUFFekIsa0JBQVEsRUFBQ0EsUUFBUSxLQUFULEVBQVIsRUFBeUIsQ0FBQyxRQUFELENBQXpCLENBRnlCLEVBR3pCLGdCQUFNLEVBQUNDLFdBQVcsRUFBWixFQUFnQkQsUUFBUSxLQUF4QixFQUFOLENBSHlCLEVBSXpCLGtCQUFRLEVBQUNBLFFBQVEsS0FBVCxFQUFSLENBSnlCLEVBS3pCLGtCQUFRLEVBQUNBLFFBQVEsS0FBVCxFQUFSLENBTHlCLEVBTXpCLGdCQUFNLEVBQUNFLE9BQU8sV0FBUixFQUFxQkMsTUFBTSxDQUEzQixFQUE4QkgsUUFBUSxLQUF0QyxFQUFOLENBTnlCLEVBT3pCLGdCQUFNLEVBQUNBLFFBQVEsS0FBVCxFQUFOLENBUHlCLENBQXBCOztBQVVQOzs7OztBQUtPLElBQU1JLHdEQUF3QjtBQUNuQ25DLFNBQU8sS0FENEI7QUFFbkNKLGFBQVcsYUFGd0I7QUFHbkNDLGFBQVcsYUFId0I7QUFJbkNDLFdBQVM7QUFKMEIsQ0FBOUIiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVGFwLFxuICBQcmVzcyxcbiAgUGluY2gsXG4gIFJvdGF0ZSxcbiAgUGFuLFxuICBTd2lwZVxufSBmcm9tICdoYW1tZXJqcyc7XG5cbi8qKlxuICogT25seSBvbmUgc2V0IG9mIGJhc2ljIGlucHV0IGV2ZW50cyB3aWxsIGJlIGZpcmVkIGJ5IEhhbW1lci5qczpcbiAqIGVpdGhlciBwb2ludGVyLCB0b3VjaCwgb3IgbW91c2UsIGRlcGVuZGluZyBvbiBzeXN0ZW0gc3VwcG9ydC5cbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbiBhcHBsaWNhdGlvbiB0byBiZSBhZ25vc3RpYyBvZiBzeXN0ZW0gc3VwcG9ydCxcbiAqIGFsaWFzIGJhc2ljIGlucHV0IGV2ZW50cyBpbnRvIFwiY2xhc3Nlc1wiIG9mIGV2ZW50czogZG93biwgbW92ZSwgYW5kIHVwLlxuICogU2VlIGBfb25CYXNpY0lucHV0KClgIGZvciB1c2FnZSBvZiB0aGVzZSBhbGlhc2VzLlxuICovXG5leHBvcnQgY29uc3QgQkFTSUNfRVZFTlRfQUxJQVNFUyA9IHtcbiAgcG9pbnRlcmRvd246ICdwb2ludGVyZG93bicsXG4gIHBvaW50ZXJtb3ZlOiAncG9pbnRlcm1vdmUnLFxuICBwb2ludGVydXA6ICdwb2ludGVydXAnLFxuICB0b3VjaHN0YXJ0OiAncG9pbnRlcmRvd24nLFxuICB0b3VjaG1vdmU6ICdwb2ludGVybW92ZScsXG4gIHRvdWNoZW5kOiAncG9pbnRlcnVwJyxcbiAgbW91c2Vkb3duOiAncG9pbnRlcmRvd24nLFxuICBtb3VzZW1vdmU6ICdwb2ludGVybW92ZScsXG4gIG1vdXNldXA6ICdwb2ludGVydXAnXG59O1xuXG4vKipcbiAqIFwiR2VzdHVyYWxcIiBldmVudHMgYXJlIHRob3NlIHRoYXQgaGF2ZSBzZW1hbnRpYyBtZWFuaW5nIGJleW9uZCB0aGUgYmFzaWMgaW5wdXQgZXZlbnQsXG4gKiBlLmcuIGEgY2xpY2sgb3IgdGFwIGlzIGEgc2VxdWVuY2Ugb2YgYGRvd25gIGFuZCBgdXBgIGV2ZW50cyB3aXRoIG5vIGBtb3ZlYCBldmVudCBpbiBiZXR3ZWVuLlxuICogSGFtbWVyLmpzIGhhbmRsZXMgdGhlc2Ugd2l0aCBpdHMgUmVjb2duaXplciBzeXN0ZW07XG4gKiB0aGlzIGJsb2NrIG1hcHMgZXZlbnQgbmFtZXMgdG8gdGhlIFJlY29nbml6ZXJzIHJlcXVpcmVkIHRvIGRldGVjdCB0aGUgZXZlbnRzLlxuICovXG5leHBvcnQgY29uc3QgRVZFTlRfUkVDT0dOSVpFUl9NQVAgPSB7XG4gIGNsaWNrOiAndGFwJyxcbiAgdGFwOiAndGFwJyxcbiAgZG91YmxldGFwOiAnZG91YmxldGFwJyxcbiAgcHJlc3M6ICdwcmVzcycsXG4gIHBpbmNoOiAncGluY2gnLFxuICBwaW5jaGluOiAncGluY2gnLFxuICBwaW5jaG91dDogJ3BpbmNoJyxcbiAgcGluY2hzdGFydDogJ3BpbmNoJyxcbiAgcGluY2htb3ZlOiAncGluY2gnLFxuICBwaW5jaGVuZDogJ3BpbmNoJyxcbiAgcGluY2hjYW5jZWw6ICdwaW5jaCcsXG4gIHJvdGF0ZTogJ3JvdGF0ZScsXG4gIHJvdGF0ZXN0YXJ0OiAncm90YXRlJyxcbiAgcm90YXRlbW92ZTogJ3JvdGF0ZScsXG4gIHJvdGF0ZWVuZDogJ3JvdGF0ZScsXG4gIHJvdGF0ZWNhbmNlbDogJ3JvdGF0ZScsXG4gIHBhbjogJ3BhbicsXG4gIHBhbnN0YXJ0OiAncGFuJyxcbiAgcGFubW92ZTogJ3BhbicsXG4gIHBhbnVwOiAncGFuJyxcbiAgcGFuZG93bjogJ3BhbicsXG4gIHBhbmxlZnQ6ICdwYW4nLFxuICBwYW5yaWdodDogJ3BhbicsXG4gIHBhbmVuZDogJ3BhbicsXG4gIHBhbmNhbmNlbDogJ3BhbicsXG4gIHN3aXBlOiAnc3dpcGUnLFxuICBzd2lwZWxlZnQ6ICdzd2lwZScsXG4gIHN3aXBlcmlnaHQ6ICdzd2lwZScsXG4gIHN3aXBldXA6ICdzd2lwZScsXG4gIHN3aXBlZG93bjogJ3N3aXBlJ1xufTtcblxuZXhwb3J0IGNvbnN0IFJFQ09HTklaRVJTID0gW1xuICBbUm90YXRlLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICBbUGluY2gsIHtlbmFibGU6IGZhbHNlfSwgWydyb3RhdGUnXV0sXG4gIFtQYW4sIHt0aHJlc2hvbGQ6IDEwLCBlbmFibGU6IGZhbHNlfV0sXG4gIFtTd2lwZSwge2VuYWJsZTogZmFsc2V9XSxcbiAgW1ByZXNzLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICBbVGFwLCB7ZXZlbnQ6ICdkb3VibGV0YXAnLCB0YXBzOiAyLCBlbmFibGU6IGZhbHNlfV0sXG4gIFtUYXAsIHtlbmFibGU6IGZhbHNlfV1cbl07XG5cbi8qKlxuICogTWFwIGdlc3R1cmFsIGV2ZW50cyB0eXBpY2FsbHkgcHJvdmlkZWQgYnkgYnJvd3NlcnNcbiAqIHRoYXQgYXJlIG5vdCByZXBvcnRlZCBpbiAnaGFtbWVyLmlucHV0JyBldmVudHNcbiAqIHRvIGNvcnJlc3BvbmRpbmcgSGFtbWVyLmpzIGdlc3R1cmVzLlxuICovXG5leHBvcnQgY29uc3QgR0VTVFVSRV9FVkVOVF9BTElBU0VTID0ge1xuICBjbGljazogJ3RhcCcsXG4gIG1vdXNlZG93bjogJ3BvaW50ZXJkb3duJyxcbiAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnLFxuICBtb3VzZXVwOiAncG9pbnRlcnVwJ1xufTtcbiJdfQ==