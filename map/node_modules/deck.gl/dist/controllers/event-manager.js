'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Portions of the code below originally from:
// https://github.com/mapbox/mapbox-gl-js/blob/master/js/ui/handler/scroll_zoom.js

var _globals = require('./globals');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function noop() {}

var ua = typeof _globals.window.navigator !== 'undefined' ? _globals.window.navigator.userAgent.toLowerCase() : '';
var firefox = ua.indexOf('firefox') !== -1;

// Extract a position from a mouse event
function getMousePosition(el, event) {
  var rect = el.getBoundingClientRect();
  event = event.touches ? event.touches[0] : event;
  return [event.clientX - rect.left - el.clientLeft, event.clientY - rect.top - el.clientTop];
}

// Extract an array of touch positions from a touch event
function getTouchPositions(el, event) {
  var points = [];
  var rect = el.getBoundingClientRect();
  for (var i = 0; i < event.touches.length; i++) {
    points.push([event.touches[i].clientX - rect.left - el.clientLeft, event.touches[i].clientY - rect.top - el.clientTop]);
  }
  return points;
}

// Return the centroid of an array of points
function centroid(positions) {
  var sum = positions.reduce(function (acc, elt) {
    return [acc[0] + elt[0], acc[1] + elt[1]];
  }, [0, 0]);
  return [sum[0] / positions.length, sum[1] / positions.length];
}

var EventManager = function () {
  function EventManager(canvas) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$onMouseMove = _ref.onMouseMove,
        onMouseMove = _ref$onMouseMove === undefined ? noop : _ref$onMouseMove,
        _ref$onMouseClick = _ref.onMouseClick,
        onMouseClick = _ref$onMouseClick === undefined ? noop : _ref$onMouseClick,
        _ref$onMouseDown = _ref.onMouseDown,
        onMouseDown = _ref$onMouseDown === undefined ? noop : _ref$onMouseDown,
        _ref$onMouseUp = _ref.onMouseUp,
        onMouseUp = _ref$onMouseUp === undefined ? noop : _ref$onMouseUp,
        _ref$onMouseRotate = _ref.onMouseRotate,
        onMouseRotate = _ref$onMouseRotate === undefined ? noop : _ref$onMouseRotate,
        _ref$onMouseDrag = _ref.onMouseDrag,
        onMouseDrag = _ref$onMouseDrag === undefined ? noop : _ref$onMouseDrag,
        _ref$onTouchStart = _ref.onTouchStart,
        onTouchStart = _ref$onTouchStart === undefined ? noop : _ref$onTouchStart,
        _ref$onTouchRotate = _ref.onTouchRotate,
        onTouchRotate = _ref$onTouchRotate === undefined ? noop : _ref$onTouchRotate,
        _ref$onTouchDrag = _ref.onTouchDrag,
        onTouchDrag = _ref$onTouchDrag === undefined ? noop : _ref$onTouchDrag,
        _ref$onTouchEnd = _ref.onTouchEnd,
        onTouchEnd = _ref$onTouchEnd === undefined ? noop : _ref$onTouchEnd,
        _ref$onTouchTap = _ref.onTouchTap,
        onTouchTap = _ref$onTouchTap === undefined ? noop : _ref$onTouchTap,
        _ref$onZoom = _ref.onZoom,
        onZoom = _ref$onZoom === undefined ? noop : _ref$onZoom,
        _ref$onZoomEnd = _ref.onZoomEnd,
        onZoomEnd = _ref$onZoomEnd === undefined ? noop : _ref$onZoomEnd,
        _ref$mapTouchToMouse = _ref.mapTouchToMouse,
        mapTouchToMouse = _ref$mapTouchToMouse === undefined ? true : _ref$mapTouchToMouse,
        _ref$pressKeyToRotate = _ref.pressKeyToRotate,
        pressKeyToRotate = _ref$pressKeyToRotate === undefined ? false : _ref$pressKeyToRotate;

    _classCallCheck(this, EventManager);

    // Install default touch handlers if requested (forwards touch to mouse)
    onTouchStart = onTouchStart || mapTouchToMouse && onMouseDown;
    onTouchDrag = onTouchDrag || mapTouchToMouse && onMouseDrag;
    onTouchRotate = onTouchRotate || mapTouchToMouse && onMouseRotate;
    onTouchEnd = onTouchEnd || mapTouchToMouse && onMouseUp;
    onTouchTap = onTouchTap || mapTouchToMouse && onMouseClick;

    this._canvas = canvas;

    // Public member: can be changed by app
    this.pressKeyToRotate = pressKeyToRotate;

    // Private state
    this.state = {
      didDrag: false,
      isFunctionKeyPressed: false,
      startPos: null,
      pos: null,
      mouseWheelPos: null
    };

    this.callbacks = {
      onMouseMove: onMouseMove,
      onMouseClick: onMouseClick,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onTouchStart: onTouchStart,
      onMouseRotate: onMouseRotate,
      onMouseDrag: onMouseDrag,
      onTouchRotate: onTouchRotate,
      onTouchDrag: onTouchDrag,
      onTouchEnd: onTouchEnd,
      onTouchTap: onTouchTap,
      onZoom: onZoom,
      onZoomEnd: onZoomEnd
    };

    this._addEventListeners();
  }

  // Register any outstanding event listeners


  _createClass(EventManager, [{
    key: '_addEventListeners',
    value: function _addEventListeners() {
      this._canvas.addEventListener('mousemove', this._onMouseMove.bind(this));
      this._canvas.addEventListener('mousedown', this._onMouseDown.bind(this));
      this._canvas.addEventListener('mouseup', this._onMouseUp.bind(this));
      this._canvas.addEventListener('touchstart', this._onTouchStart.bind(this));
      this._canvas.addEventListener('contextmenu', this._onMouseDown.bind(this));
      this._canvas.addEventListener('mousewheel', this._onWheel.bind(this));
    }
  }, {
    key: 'setState',
    value: function setState(settings) {
      Object.assign(this.state, settings);
    }
  }, {
    key: '_getMousePos',
    value: function _getMousePos(event) {
      var el = this._canvas;
      return getMousePosition(el, event);
    }
  }, {
    key: '_getTouchPos',
    value: function _getTouchPos(event) {
      var el = this._canvas;
      var positions = getTouchPositions(el, event);
      return centroid(positions);
    }
  }, {
    key: '_isFunctionKeyPressed',
    value: function _isFunctionKeyPressed(event) {
      return Boolean(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }
  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(event) {
      var pos = this._getMousePos(event);
      this.setState({
        didDrag: false,
        startPos: pos,
        pos: pos,
        isFunctionKeyPressed: this._isFunctionKeyPressed(event)
      });
      this.callbacks.onMouseDown({ pos: pos });
      _globals.document.addEventListener('mousemove', this._onMouseDrag.bind(this), false);
      _globals.document.addEventListener('mouseup', this._onMouseUp.bind(this), false);
    }
  }, {
    key: '_onTouchStart',
    value: function _onTouchStart(event) {
      var pos = this._getTouchPos(event);
      this.setState({
        didDrag: false,
        startPos: pos,
        pos: pos,
        isFunctionKeyPressed: this._isFunctionKeyPressed(event)
      });
      this.callbacks.onTouchStart({ pos: pos });
      _globals.document.addEventListener('touchmove', this._onTouchDrag.bind(this), false);
      _globals.document.addEventListener('touchend', this._onTouchEnd.bind(this), false);
    }
  }, {
    key: '_onMouseDrag',
    value: function _onMouseDrag(event) {
      var pos = this._getMousePos(event);
      this.setState({ pos: pos, didDrag: true });
      var startPos = this.state.startPos;
      var isFunctionKeyPressed = this.state.isFunctionKeyPressed;

      var rotate = this.pressKeyToRotate ? isFunctionKeyPressed : !isFunctionKeyPressed;

      if (rotate) {
        this.callbacks.onMouseRotate({ pos: pos, startPos: startPos });
      } else {
        this.callbacks.onMouseDrag({ pos: pos, startPos: startPos });
      }
    }
  }, {
    key: '_onTouchDrag',
    value: function _onTouchDrag(event) {
      var pos = this._getTouchPos(event);
      this.setState({ pos: pos, didDrag: true });

      var isFunctionKeyPressed = this.state.isFunctionKeyPressed;

      var rotate = this.pressKeyToRotate ? isFunctionKeyPressed : !isFunctionKeyPressed;

      if (rotate) {
        var startPos = this.state.startPos;

        this.callbacks.onTouchRotate({ pos: pos, startPos: startPos });
      } else {
        this.callbacks.onTouchDrag({ pos: pos });
      }
      event.preventDefault();
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp(event) {
      _globals.document.removeEventListener('mousemove', this._onMouseDrag, false);
      _globals.document.removeEventListener('mouseup', this._onMouseUp, false);
      var pos = this._getMousePos(event);
      this.setState({ pos: pos });
      this.callbacks.onMouseUp({ pos: pos });
      if (!this.state.didDrag) {
        this.callbacks.onMouseClick({ pos: pos });
      }
    }
  }, {
    key: '_onTouchEnd',
    value: function _onTouchEnd(event) {
      _globals.document.removeEventListener('touchmove', this._onTouchDrag, false);
      _globals.document.removeEventListener('touchend', this._onTouchEnd, false);
      var pos = this._getTouchPos(event);
      this.setState({ pos: pos });
      this.callbacks.onTouchEnd({ pos: pos });
      if (!this.state.didDrag) {
        this.callbacks.onTouchTap({ pos: pos });
      }
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(event) {
      var pos = this._getMousePos(event);
      this.callbacks.onMouseMove({ pos: pos });
    }

    /* eslint-disable complexity, max-statements */

  }, {
    key: '_onWheel',
    value: function _onWheel(event) {
      event.preventDefault();
      var value = event.deltaY;
      // Firefox doubles the values on retina screens...
      if (firefox && event.deltaMode === _globals.window.WheelEvent.DOM_DELTA_PIXEL) {
        value /= _globals.window.devicePixelRatio;
      }
      if (event.deltaMode === _globals.window.WheelEvent.DOM_DELTA_LINE) {
        value *= 40;
      }

      var type = this.state.mouseWheelType;
      var timeout = this.state.mouseWheelTimeout;
      var lastValue = this.state.mouseWheelLastValue;
      var time = this.state.mouseWheelTime;

      var now = (_globals.window.performance || Date).now();
      var timeDelta = now - (time || 0);

      var pos = this._getMousePos(event);
      time = now;

      if (value !== 0 && value % 4.000244140625 === 0) {
        // This one is definitely a mouse wheel event.
        type = 'wheel';
        // Normalize this value to match trackpad.
        value = Math.floor(value / 4);
      } else if (value !== 0 && Math.abs(value) < 4) {
        // This one is definitely a trackpad event because it is so small.
        type = 'trackpad';
      } else if (timeDelta > 400) {
        // This is likely a new scroll action.
        type = null;
        lastValue = value;
        // Start a timeout in case this was a singular event, and delay it by up
        // to 40ms.
        timeout = _globals.window.setTimeout(function setTimeout() {
          var _type = 'wheel';
          this._zoom(-this.state.mouseWheelLastValue, this.state.mouseWheelPos);
          this.setState({ mouseWheelType: _type });
        }.bind(this), 40);
      } else if (!this._type) {
        // This is a repeating event, but we don't know the type of event just
        // yet.
        // If the delta per time is small, we assume it's a fast trackpad;
        // otherwise we switch into wheel mode.
        type = Math.abs(timeDelta * value) < 200 ? 'trackpad' : 'wheel';

        // Make sure our delayed event isn't fired again, because we accumulate
        // the previous event (which was less than 40ms ago) into this event.
        if (timeout) {
          _globals.window.clearTimeout(timeout);
          timeout = null;
          value += lastValue;
        }
      }

      // Slow down zoom if shift key is held for more precise zooming
      if (event.shiftKey && value) {
        value = value / 4;
      }

      // Only fire the callback if we actually know what type of scrolling device
      // the user uses.
      if (type) {
        this._zoom(-value, pos);
      }

      this.setState({
        mouseWheelTime: time,
        mouseWheelPos: pos,
        mouseWheelType: type,
        mouseWheelTimeout: timeout,
        mouseWheelLastValue: lastValue
      });
    }
    /* eslint-enable complexity, max-statements */

  }, {
    key: '_zoom',
    value: function _zoom(delta, pos) {
      // Scale by sigmoid of scroll wheel delta.
      var scale = 2 / (1 + Math.exp(-Math.abs(delta / 100)));
      if (delta < 0 && scale !== 0) {
        scale = 1 / scale;
      }
      this.callbacks.onZoom({ pos: pos, delta: delta, scale: scale });
      _globals.window.clearTimeout(this._zoomEndTimeout);
      this._zoomEndTimeout = _globals.window.setTimeout(function _setTimeout() {
        this.callbacks.onZoomEnd();
      }.bind(this), 200);
    }
  }]);

  return EventManager;
}();

exports.default = EventManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,