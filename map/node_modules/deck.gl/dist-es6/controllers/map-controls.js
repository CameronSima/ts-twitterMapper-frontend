var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { PropTypes, PureComponent, createElement } from 'react';
import { PerspectiveMercatorViewport } from 'viewport-mercator-project';

// MapControls uses non-react event manager to register events
import EventManager from './event-manager';

// import browser from 'bowser';
var PREFIX = '-webkit-';
// browser.webkit || browser.blink ? '-webkit-' :
// browser.gecko ? '-moz-' :
// '';
var CURSOR = {
  GRABBING: PREFIX + 'grabbing',
  GRAB: PREFIX + 'grab',
  POINTER: 'pointer'
};

function mod(value, divisor) {
  var modulus = value % divisor;
  return modulus < 0 ? divisor + modulus : modulus;
}
// MAPBOX LIMITS
var MAX_PITCH = 60;
var MAX_ZOOM = 40;

// EVENT HANDLING PARAMETERS
var PITCH_MOUSE_THRESHOLD = 5;
var PITCH_ACCEL = 1.2;

/* eslint-disable no-inline-comments */
var propTypes = {
  width: PropTypes.number.isRequired, // The width of the map
  height: PropTypes.number.isRequired, // The height of the map
  latitude: PropTypes.number.isRequired, // The latitude of the center of the map.
  longitude: PropTypes.number.isRequired, // The longitude of the center of the map.
  zoom: PropTypes.number.isRequired, // The tile zoom level of the map.
  bearing: PropTypes.number, // Specify the bearing of the viewport
  pitch: PropTypes.number, // Specify the pitch of the viewport
  altitude: PropTypes.number, // Altitude of viewport camera. Unit: map heights, default 1.5

  constraints: PropTypes.object,

  dragToRotate: PropTypes.bool, // Enables perspective control event handling

  onViewportChange: PropTypes.func, // `onViewportChange` is fired on user interaction

  isDragging: PropTypes.bool, // Is the component currently being dragged.
  startDragLngLat: PropTypes.arrayOf(PropTypes.number), // Position when current drag started
  startBearing: PropTypes.number, // Bearing when current perspective drag started
  startPitch: PropTypes.number, // Pitch when current perspective drag operation started

  pressKeyToRotate: PropTypes.bool, // If key must be pressed for mouse to rotate vs pan

  /* Hooks to get mapbox help with calculations. TODO - replace with Viewport */
  unproject: PropTypes.func,
  getLngLatAtPoint: PropTypes.func
};

var defaultProps = {
  bearing: 0,
  pitch: 0,
  altitude: 1.5,
  clickRadius: 15,
  onViewportChange: null,

  maxZoom: MAX_ZOOM,
  minZoom: 0,
  maxPitch: MAX_PITCH,
  minPitch: 0,

  unproject: null,
  getLngLatAtPoint: null,

  pressKeyToRotate: true
};

var MapControls = function (_PureComponent) {
  _inherits(MapControls, _PureComponent);

  /**
   * @classdesc
   * A component that monitors events and updates mercator style viewport parameters
   * It can be used with or without a mapbox map
   * (e.g. it could pan over a static map image)
   */
  function MapControls(props) {
    _classCallCheck(this, MapControls);

    var _this = _possibleConstructorReturn(this, (MapControls.__proto__ || Object.getPrototypeOf(MapControls)).call(this, props));

    _this.state = {
      isDragging: false,
      isHovering: false,
      startDragLngLat: null,
      startBearing: null,
      startPitch: null
    };
    return _this;
  }

  _createClass(MapControls, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Register event handlers on the canvas using the EventManager helper class
      //
      // Note that mouse move and click are handled directly by static-map
      // Corresponding to hover and click on map
      // onMouseMove={this._onMouseMove}
      // onMouseClick={this._onMouseClick}

      this._eventManager = new EventManager(this.refs.canvas, {
        onMouseDown: this._onMouseDown.bind(this),
        onMouseDrag: this._onMouseDrag.bind(this),
        onMouseRotate: this._onMouseRotate.bind(this),
        onMouseUp: this._onMouseUp.bind(this),
        onZoom: this._onZoom.bind(this),
        onZoomEnd: this._onZoomEnd.bind(this),
        mapTouchToMouse: true,
        pressKeyToRotate: this.props.pressKeyToRotate
      });
    }

    // New props are comin' round the corner!

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var startDragLngLat = newProps.startDragLngLat;

      this.setState({
        startDragLngLat: startDragLngLat && [].concat(_toConsumableArray(startDragLngLat))
      });
    }

    // Calculate a cursor style to show that we are in "dragging state"

  }, {
    key: '_getCursor',
    value: function _getCursor() {
      var isInteractive = this.props.onViewportChange || this.props.onClickFeature || this.props.onHoverFeatures;

      if (!isInteractive) {
        return 'inherit';
      }
      if (this.props.isDragging) {
        return CURSOR.GRABBING;
      }
      if (this.state.isHovering) {
        return CURSOR.POINTER;
      }
      return CURSOR.GRAB;
    }
  }, {
    key: '_updateViewport',
    value: function _updateViewport(opts) {
      var viewport = Object.assign({
        latitude: this.props.latitude,
        longitude: this.props.longitude,
        zoom: this.props.zoom,
        bearing: this.props.bearing,
        pitch: this.props.pitch,
        altitude: this.props.altitude,
        isDragging: this.props.isDragging,
        startDragLngLat: this.props.startDragLngLat,
        startBearing: this.props.startBearing,
        startPitch: this.props.startPitch
      }, opts);

      viewport = this._applyConstraints(viewport);

      return this.props.onViewportChange(viewport);
    }

    // Apply any constraints (mathematical or defined by props) to viewport params

  }, {
    key: '_applyConstraints',
    value: function _applyConstraints(viewport) {
      // Normalize degrees
      viewport.longitude = mod(viewport.longitude + 180, 360) - 180;
      viewport.bearing = mod(viewport.bearing + 180, 360) - 180;

      // Ensure zoom is within specified range
      var _props = this.props,
          maxZoom = _props.maxZoom,
          minZoom = _props.minZoom;

      viewport.zoom = viewport.zoom > maxZoom ? maxZoom : viewport.zoom;
      viewport.zoom = viewport.zoom < minZoom ? minZoom : viewport.zoom;

      // Ensure pitch is within specified range
      var _props2 = this.props,
          maxPitch = _props2.maxPitch,
          minPitch = _props2.minPitch;


      viewport.pitch = viewport.pitch > maxPitch ? maxPitch : viewport.pitch;
      viewport.pitch = viewport.pitch < minPitch ? minPitch : viewport.pitch;

      return viewport;
    }
  }, {
    key: '_unproject',
    value: function _unproject(pos) {
      var viewport = new PerspectiveMercatorViewport(Object.assign({}, this.props));
      var lngLat = this.props.unproject ? this.props.unproject(pos) : viewport.unproject(pos, { topLeft: false });
      return lngLat;
    }

    // Calculate a new lnglat based on pixel dragging position
    // TODO - We should have a mapbox-independent implementation of panning
    // Panning calculation is currently done using an undocumented mapbox function

  }, {
    key: '_calculateNewLngLat',
    value: function _calculateNewLngLat(_ref) {
      var startDragLngLat = _ref.startDragLngLat,
          pos = _ref.pos,
          startPos = _ref.startPos;

      var viewport = new PerspectiveMercatorViewport(Object.assign({}, this.props, {
        longitude: startDragLngLat[0],
        latitude: startDragLngLat[1]
      }));

      var lngLat = this.props.getLngLatAtPoint ? this.props.getLngLatAtPoint({ lngLat: startDragLngLat, pos: pos }) : viewport.getLocationAtPoint({ lngLat: startDragLngLat, pos: pos });

      return lngLat;
    }

    // Calculates new zoom

  }, {
    key: '_calculateNewZoom',
    value: function _calculateNewZoom(_ref2) {
      var relativeScale = _ref2.relativeScale;

      return this.props.zoom + Math.log2(relativeScale);
    }

    // Calculates a new pitch and bearing from a position (coming from an event)

  }, {
    key: '_calculateNewPitchAndBearing',
    value: function _calculateNewPitchAndBearing(_ref3) {
      var pos = _ref3.pos,
          startPos = _ref3.startPos,
          startBearing = _ref3.startBearing,
          startPitch = _ref3.startPitch;
      var maxPitch = this.props.maxPitch;
      // TODO minPitch

      var xDelta = pos[0] - startPos[0];
      var yDelta = pos[1] - startPos[1];

      var bearing = startBearing + 180 * xDelta / this.props.width;

      var pitch = startPitch;
      if (yDelta > 0) {
        // Dragging downwards, gradually decrease pitch
        if (Math.abs(this.props.height - startPos[1]) > PITCH_MOUSE_THRESHOLD) {
          var scale = yDelta / (this.props.height - startPos[1]);
          pitch = (1 - scale) * PITCH_ACCEL * startPitch;
        }
      } else if (yDelta < 0) {
        // Dragging upwards, gradually increase pitch
        if (startPos[1] > PITCH_MOUSE_THRESHOLD) {
          // Move from 0 to 1 as we drag upwards
          var yScale = 1 - pos[1] / startPos[1];
          // Gradually add until we hit max pitch
          pitch = startPitch + yScale * (maxPitch - startPitch);
        }
      }

      return {
        pitch: pitch,
        bearing: bearing
      };
    }

    // EVENT HANDLERS

  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(_ref4) {
      var pos = _ref4.pos;

      this._updateViewport({
        isDragging: true,
        startDragLngLat: this._unproject(pos),
        startBearing: this.props.bearing,
        startPitch: this.props.pitch
      });
    }
  }, {
    key: '_onMouseDrag',
    value: function _onMouseDrag(_ref5) {
      var pos = _ref5.pos;

      if (!this.props.onViewportChange) {
        return;
      }

      var startDragLngLat = this.state.startDragLngLat;

      // take the start lnglat and put it where the mouse is down.

      if (!startDragLngLat) {
        console.log( // eslint-disable-line
        startDragLngLat, '`startDragLngLat` prop is required ' + 'for mouse drag behavior to calculate where to position the map.');
        return;
      }
      // assert(startDragLngLat, '`startDragLngLat` prop is required ' +
      //   'for mouse drag behavior to calculate where to position the map.');

      var _calculateNewLngLat2 = this._calculateNewLngLat({ startDragLngLat: startDragLngLat, pos: pos }),
          _calculateNewLngLat3 = _slicedToArray(_calculateNewLngLat2, 2),
          longitude = _calculateNewLngLat3[0],
          latitude = _calculateNewLngLat3[1];

      this._updateViewport({
        longitude: longitude,
        latitude: latitude,
        isDragging: true
      });
    }
  }, {
    key: '_onMouseRotate',
    value: function _onMouseRotate(_ref6) {
      var pos = _ref6.pos,
          startPos = _ref6.startPos;

      if (!this.props.onViewportChange || !this.props.dragToRotate) {
        return;
      }

      var _props3 = this.props,
          startBearing = _props3.startBearing,
          startPitch = _props3.startPitch;

      if (typeof startBearing !== 'number') {
        console.error( // eslint-disable-line
        '`startBearing` prop is required for mouse rotate behavior');
        return;
      }
      if (typeof startPitch !== 'number') {
        console.error( // eslint-disable-line
        '`startPitch` prop is required for mouse rotate behavior');
        return;
      }

      // assert(typeof startBearing === 'number',
      //   '`startBearing` prop is required for mouse rotate behavior');
      // assert(typeof startPitch === 'number',
      //   '`startPitch` prop is required for mouse rotate behavior');

      var _calculateNewPitchAnd = this._calculateNewPitchAndBearing({
        pos: pos,
        startPos: startPos,
        startBearing: startBearing,
        startPitch: startPitch
      }),
          pitch = _calculateNewPitchAnd.pitch,
          bearing = _calculateNewPitchAnd.bearing;

      this._updateViewport({
        bearing: bearing,
        pitch: pitch,
        isDragging: true
      });
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp(opt) {
      this._updateViewport({
        isDragging: false,
        startDragLngLat: null,
        startBearing: null,
        startPitch: null
      });
    }
  }, {
    key: '_onZoom',
    value: function _onZoom(_ref7) {
      var pos = _ref7.pos,
          scale = _ref7.scale;

      // Make sure we zoom around the current mouse position rather than map center
      var viewport = new PerspectiveMercatorViewport(this.props);
      var aroundLngLat = viewport.unproject(pos);

      var zoom = this._calculateNewZoom({ relativeScale: scale });

      var zoomedViewport = new PerspectiveMercatorViewport(Object.assign({}, this.props, { zoom: zoom }));

      var _zoomedViewport$getLo = zoomedViewport.getLocationAtPoint({ lngLat: aroundLngLat, pos: pos }),
          _zoomedViewport$getLo2 = _slicedToArray(_zoomedViewport$getLo, 2),
          longitude = _zoomedViewport$getLo2[0],
          latitude = _zoomedViewport$getLo2[1];

      this._updateViewport({
        zoom: this._calculateNewZoom({ relativeScale: scale }),
        longitude: longitude,
        latitude: latitude,
        isDragging: true
      });
    }
  }, {
    key: '_onZoomEnd',
    value: function _onZoomEnd() {
      this._updateViewport({ isDragging: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          className = _props4.className,
          width = _props4.width,
          height = _props4.height,
          style = _props4.style;


      var mapEventLayerStyle = Object.assign({}, style, {
        width: width,
        height: height,
        position: 'relative',
        cursor: this._getCursor()
      });

      return createElement('div', {
        ref: 'canvas',
        style: mapEventLayerStyle,
        className: className
      }, this.props.children);
    }
  }]);

  return MapControls;
}(PureComponent);

export default MapControls;


MapControls.displayName = 'MapControls';
MapControls.propTypes = propTypes;
MapControls.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,