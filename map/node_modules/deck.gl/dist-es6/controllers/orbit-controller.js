var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global window */
import { Component, PropTypes, createElement } from 'react';
import { PerspectiveViewport } from 'deck.gl';
import { vec3 } from 'gl-matrix';

/* Utils */

// constrain number between bounds
function clamp(x, min, max) {
  if (x < min) {
    return min;
  }
  if (x > max) {
    return max;
  }
  return x;
}

var ua = typeof window.navigator !== 'undefined' ? window.navigator.userAgent.toLowerCase() : '';
var firefox = ua.indexOf('firefox') !== -1;

var propTypes = {
  // target position
  lookAt: PropTypes.arrayOf(PropTypes.number),
  // camera distance
  distance: PropTypes.number.isRequired,
  minDistance: PropTypes.number,
  maxDistance: PropTypes.number,
  // rotation
  rotationX: PropTypes.number,
  rotationY: PropTypes.number,
  // field of view
  fov: PropTypes.number,
  // viewport width in pixels
  width: PropTypes.number.isRequired,
  // viewport height in pixels
  height: PropTypes.number.isRequired,
  // callback
  onViewportChange: PropTypes.func.isRequired
};

var defaultProps = {
  lookAt: [0, 0, 0],
  rotationX: 0,
  rotationY: 0,
  minDistance: 0,
  maxDistance: Infinity,
  fov: 50
};

var OrbitController = function (_Component) {
  _inherits(OrbitController, _Component);

  _createClass(OrbitController, null, [{
    key: 'getViewport',
    value: function getViewport(_ref) {
      var width = _ref.width,
          height = _ref.height,
          lookAt = _ref.lookAt,
          distance = _ref.distance,
          rotationX = _ref.rotationX,
          rotationY = _ref.rotationY,
          fov = _ref.fov;

      var cameraPos = vec3.add([], lookAt, [0, 0, distance]);
      vec3.rotateX(cameraPos, cameraPos, lookAt, rotationX / 180 * Math.PI);
      vec3.rotateY(cameraPos, cameraPos, lookAt, rotationY / 180 * Math.PI);

      return new PerspectiveViewport({
        width: width,
        height: height,
        lookAt: lookAt,
        far: 1000,
        near: 0.1,
        fovy: fov,
        eye: cameraPos
      });
    }
  }]);

  function OrbitController(props) {
    _classCallCheck(this, OrbitController);

    var _this = _possibleConstructorReturn(this, (OrbitController.__proto__ || Object.getPrototypeOf(OrbitController)).call(this, props));

    _this._dragStartPos = null;
    return _this;
  }

  _createClass(OrbitController, [{
    key: '_onDragStart',
    value: function _onDragStart(evt) {
      var pageX = evt.pageX,
          pageY = evt.pageY;

      this._dragStartPos = [pageX, pageY];
      this.props.onViewportChange({ isDragging: true });
    }
  }, {
    key: '_onDrag',
    value: function _onDrag(evt) {
      if (this._dragStartPos) {
        var pageX = evt.pageX,
            pageY = evt.pageY;
        var _props = this.props,
            width = _props.width,
            height = _props.height;

        var dx = (pageX - this._dragStartPos[0]) / width;
        var dy = (pageY - this._dragStartPos[1]) / height;

        if (evt.shiftKey || evt.ctrlKey || evt.altKey || evt.metaKey) {
          // pan
          var _props2 = this.props,
              lookAt = _props2.lookAt,
              distance = _props2.distance,
              rotationX = _props2.rotationX,
              rotationY = _props2.rotationY,
              fov = _props2.fov;


          var unitsPerPixel = distance / Math.tan(fov / 180 * Math.PI / 2) / 2;

          var newLookAt = vec3.add([], lookAt, [-unitsPerPixel * dx, unitsPerPixel * dy, 0]);
          vec3.rotateX(newLookAt, newLookAt, lookAt, rotationX / 180 * Math.PI);
          vec3.rotateY(newLookAt, newLookAt, lookAt, rotationY / 180 * Math.PI);

          this.props.onViewportChange({
            lookAt: newLookAt
          });
        } else {
          // rotate
          var _props3 = this.props,
              _rotationX = _props3.rotationX,
              _rotationY = _props3.rotationY;

          var newRotationX = clamp(_rotationX - dy * 180, -90, 90);
          var newRotationY = (_rotationY - dx * 180) % 360;

          this.props.onViewportChange({
            rotationX: newRotationX,
            rotationY: newRotationY
          });
        }

        this._dragStartPos = [pageX, pageY];
      }
    }
  }, {
    key: '_onDragEnd',
    value: function _onDragEnd() {
      this._dragStartPos = null;
      this.props.onViewportChange({ isDragging: false });
    }
  }, {
    key: '_onWheel',
    value: function _onWheel(evt) {
      evt.preventDefault();
      var value = evt.deltaY;
      // Firefox doubles the values on retina screens...
      if (firefox && evt.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {
        value /= window.devicePixelRatio;
      }
      if (evt.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {
        value *= 40;
      }
      if (value !== 0 && value % 4.000244140625 === 0) {
        // This one is definitely a mouse wheel event.
        // Normalize this value to match trackpad.
        value = Math.floor(value / 4);
      }

      var _props4 = this.props,
          distance = _props4.distance,
          minDistance = _props4.minDistance,
          maxDistance = _props4.maxDistance;

      var newDistance = clamp(distance * Math.pow(1.01, value), minDistance, maxDistance);

      this.props.onViewportChange({
        distance: newDistance
      });
    }

    // public API

  }, {
    key: 'fitBounds',
    value: function fitBounds(min, max) {
      var fov = this.props.fov;

      var size = Math.max(max[0] - min[0], max[1] - min[1], max[2] - min[2]);
      var newDistance = size / Math.tan(fov / 180 * Math.PI / 2) / 2;

      this.props.onViewportChange({
        distance: newDistance
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return createElement('div', {
        style: { position: 'relative', userSelect: 'none' },
        onMouseDown: this._onDragStart.bind(this),
        onMouseMove: this._onDrag.bind(this),
        onMouseLeave: this._onDragEnd.bind(this),
        onMouseUp: this._onDragEnd.bind(this),
        onWheel: this._onWheel.bind(this),
        children: this.props.children
      });
    }
  }]);

  return OrbitController;
}(Component);

export default OrbitController;


OrbitController.propTypes = propTypes;
OrbitController.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,