var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { Layer } from '../../../lib';
import { assembleShaders } from '../../../shader-utils';
import { get } from '../../../lib/utils';
import { GL, Model, Geometry } from 'luma.gl';
import { enable64bitSupport } from '../../../lib/utils/fp64';
import { COORDINATE_SYSTEM } from '../../../lib';

// Polygon geometry generation is managed by the polygon tesselator
import { PolygonTesselator } from './polygon-tesselator';
import { PolygonTesselatorExtruded } from './polygon-tesselator-extruded';

import solidPolygonVertex from './solid-polygon-layer-vertex.glsl';
import solidPolygonVertex64 from './solid-polygon-layer-vertex-64.glsl';
import solidPolygonFragment from './solid-polygon-layer-fragment.glsl';

var defaultProps = {
  // Whether to extrude
  extruded: false,
  // Whether to draw a GL.LINES wireframe of the polygon
  wireframe: false,
  fp64: false,

  // Accessor for polygon geometry
  getPolygon: function getPolygon(f) {
    return get(f, 'polygon') || get(f, 'geometry.coordinates');
  },
  // Accessor for extrusion height
  getElevation: function getElevation(f) {
    return get(f, 'elevation') || get(f, 'properties.height') || 0;
  },
  // Accessor for color
  getColor: function getColor(f) {
    return get(f, 'color') || get(f, 'properties.color');
  },

  // Optional settings for 'lighting' shader module
  lightSettings: {
    lightsPosition: [-122.45, 37.75, 8000, -122.0, 38.00, 5000],
    ambientRatio: 0.05,
    diffuseRatio: 0.6,
    specularRatio: 0.8,
    lightsStrength: [2.0, 0.0, 0.0, 0.0],
    numberOfLights: 2
  }
};

var SolidPolygonLayer = function (_Layer) {
  _inherits(SolidPolygonLayer, _Layer);

  function SolidPolygonLayer() {
    _classCallCheck(this, SolidPolygonLayer);

    return _possibleConstructorReturn(this, (SolidPolygonLayer.__proto__ || Object.getPrototypeOf(SolidPolygonLayer)).apply(this, arguments));
  }

  _createClass(SolidPolygonLayer, [{
    key: 'getShaders',
    value: function getShaders() {
      return enable64bitSupport(this.props) ? {
        vs: solidPolygonVertex64,
        fs: solidPolygonFragment,
        modules: ['fp64', 'project64', 'lighting'],
        shaderCache: this.context.shaderCache
      } : {
        vs: solidPolygonVertex,
        fs: solidPolygonFragment,
        modules: ['lighting'],
        shaderCache: this.context.shaderCache
      };
    }
  }, {
    key: 'initializeState',
    value: function initializeState() {
      var gl = this.context.gl;

      this.setState({
        model: this._getModel(gl),
        numInstances: 0,
        IndexType: gl.getExtension('OES_element_index_uint') ? Uint32Array : Uint16Array
      });

      var attributeManager = this.state.attributeManager;

      var noAlloc = true;
      /* eslint-disable max-len */
      attributeManager.add({
        indices: { size: 1, isIndexed: true, update: this.calculateIndices, noAlloc: noAlloc },
        positions: { size: 3, accessor: 'getElevation', update: this.calculatePositions, noAlloc: noAlloc },
        normals: { size: 3, update: this.calculateNormals, noAlloc: noAlloc },
        colors: { size: 4, type: GL.UNSIGNED_BYTE, accessor: 'getColor', update: this.calculateColors, noAlloc: noAlloc },
        pickingColors: { size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc: noAlloc }
      });
      /* eslint-enable max-len */
    }
  }, {
    key: 'updateAttribute',
    value: function updateAttribute(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          changeFlags = _ref.changeFlags;

      if (props.fp64 !== oldProps.fp64) {
        var attributeManager = this.state.attributeManager;

        attributeManager.invalidateAll();

        if (props.fp64 && props.projectionMode === COORDINATE_SYSTEM.LNGLAT) {
          attributeManager.add({
            positions64xyLow: { size: 2, update: this.calculatePositionsLow }
          });
        } else {
          attributeManager.remove(['positions64xyLow']);
        }
      }
    }
  }, {
    key: 'draw',
    value: function draw(_ref2) {
      var uniforms = _ref2.uniforms;
      var _props = this.props,
          extruded = _props.extruded,
          lightSettings = _props.lightSettings;


      this.state.model.render(Object.assign({}, uniforms, {
        extruded: extruded ? 1.0 : 0.0
      }, lightSettings));
    }
  }, {
    key: 'updateState',
    value: function updateState(_ref3) {
      var props = _ref3.props,
          oldProps = _ref3.oldProps,
          changeFlags = _ref3.changeFlags;

      _get(SolidPolygonLayer.prototype.__proto__ || Object.getPrototypeOf(SolidPolygonLayer.prototype), 'updateState', this).call(this, { props: props, oldProps: oldProps, changeFlags: changeFlags });

      var regenerateModel = this.updateGeometry({ props: props, oldProps: oldProps, changeFlags: changeFlags });

      if (regenerateModel) {
        var gl = this.context.gl;

        this.setState({ model: this._getModel(gl) });
      }
      this.updateAttribute({ props: props, oldProps: oldProps, changeFlags: changeFlags });
    }
  }, {
    key: 'updateGeometry',
    value: function updateGeometry(_ref4) {
      var _this2 = this;

      var props = _ref4.props,
          oldProps = _ref4.oldProps,
          changeFlags = _ref4.changeFlags;

      var geometryConfigChanged = props.extruded !== oldProps.extruded || props.wireframe !== oldProps.wireframe || props.fp64 !== oldProps.fp64;

      // When the geometry config  or the data is changed,
      // tessellator needs to be invoked
      if (changeFlags.dataChanged || geometryConfigChanged) {
        var getPolygon = props.getPolygon,
            extruded = props.extruded,
            wireframe = props.wireframe,
            getElevation = props.getElevation;

        // TODO - avoid creating a temporary array here: let the tesselator iterate

        var polygons = props.data.map(getPolygon);

        this.setState({
          polygonTesselator: !extruded ? new PolygonTesselator({ polygons: polygons, fp64: this.props.fp64 }) : new PolygonTesselatorExtruded({ polygons: polygons, wireframe: wireframe,
            getHeight: function getHeight(polygonIndex) {
              return getElevation(_this2.props.data[polygonIndex]);
            },
            fp64: this.props.fp64
          })
        });

        this.state.attributeManager.invalidateAll();
      }

      return geometryConfigChanged;
    }
  }, {
    key: '_getModel',
    value: function _getModel(gl) {
      var shaders = assembleShaders(gl, this.getShaders());

      return new Model({
        gl: gl,
        id: this.props.id,
        vs: shaders.vs,
        fs: shaders.fs,
        geometry: new Geometry({
          drawMode: this.props.wireframe ? GL.LINES : GL.TRIANGLES
        }),
        vertexCount: 0,
        isIndexed: true
      });
    }
  }, {
    key: 'calculateIndices',
    value: function calculateIndices(attribute) {
      attribute.value = this.state.polygonTesselator.indices();
      attribute.target = GL.ELEMENT_ARRAY_BUFFER;
      this.state.model.setVertexCount(attribute.value.length / attribute.size);
    }
  }, {
    key: 'calculatePositions',
    value: function calculatePositions(attribute) {
      attribute.value = this.state.polygonTesselator.positions().positions;
    }
  }, {
    key: 'calculatePositionsLow',
    value: function calculatePositionsLow(attribute) {
      attribute.value = this.state.polygonTesselator.positions().positions64xyLow;
    }
  }, {
    key: 'calculateNormals',
    value: function calculateNormals(attribute) {
      attribute.value = this.state.polygonTesselator.normals();
    }
  }, {
    key: 'calculateColors',
    value: function calculateColors(attribute) {
      var _this3 = this;

      attribute.value = this.state.polygonTesselator.colors({
        getColor: function getColor(polygonIndex) {
          return _this3.props.getColor(_this3.props.data[polygonIndex]);
        }
      });
    }

    // Override the default picking colors calculation

  }, {
    key: 'calculatePickingColors',
    value: function calculatePickingColors(attribute) {
      attribute.value = this.state.polygonTesselator.pickingColors();
    }
  }]);

  return SolidPolygonLayer;
}(Layer);

export default SolidPolygonLayer;


SolidPolygonLayer.layerName = 'SolidPolygonLayer';
SolidPolygonLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9sYXllcnMvY29yZS9zb2xpZC1wb2x5Z29uLWxheWVyL3NvbGlkLXBvbHlnb24tbGF5ZXIuanMiXSwibmFtZXMiOlsiTGF5ZXIiLCJhc3NlbWJsZVNoYWRlcnMiLCJnZXQiLCJHTCIsIk1vZGVsIiwiR2VvbWV0cnkiLCJlbmFibGU2NGJpdFN1cHBvcnQiLCJDT09SRElOQVRFX1NZU1RFTSIsIlBvbHlnb25UZXNzZWxhdG9yIiwiUG9seWdvblRlc3NlbGF0b3JFeHRydWRlZCIsInNvbGlkUG9seWdvblZlcnRleCIsInNvbGlkUG9seWdvblZlcnRleDY0Iiwic29saWRQb2x5Z29uRnJhZ21lbnQiLCJkZWZhdWx0UHJvcHMiLCJleHRydWRlZCIsIndpcmVmcmFtZSIsImZwNjQiLCJnZXRQb2x5Z29uIiwiZiIsImdldEVsZXZhdGlvbiIsImdldENvbG9yIiwibGlnaHRTZXR0aW5ncyIsImxpZ2h0c1Bvc2l0aW9uIiwiYW1iaWVudFJhdGlvIiwiZGlmZnVzZVJhdGlvIiwic3BlY3VsYXJSYXRpbyIsImxpZ2h0c1N0cmVuZ3RoIiwibnVtYmVyT2ZMaWdodHMiLCJTb2xpZFBvbHlnb25MYXllciIsInByb3BzIiwidnMiLCJmcyIsIm1vZHVsZXMiLCJzaGFkZXJDYWNoZSIsImNvbnRleHQiLCJnbCIsInNldFN0YXRlIiwibW9kZWwiLCJfZ2V0TW9kZWwiLCJudW1JbnN0YW5jZXMiLCJJbmRleFR5cGUiLCJnZXRFeHRlbnNpb24iLCJVaW50MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiYXR0cmlidXRlTWFuYWdlciIsInN0YXRlIiwibm9BbGxvYyIsImFkZCIsImluZGljZXMiLCJzaXplIiwiaXNJbmRleGVkIiwidXBkYXRlIiwiY2FsY3VsYXRlSW5kaWNlcyIsInBvc2l0aW9ucyIsImFjY2Vzc29yIiwiY2FsY3VsYXRlUG9zaXRpb25zIiwibm9ybWFscyIsImNhbGN1bGF0ZU5vcm1hbHMiLCJjb2xvcnMiLCJ0eXBlIiwiVU5TSUdORURfQllURSIsImNhbGN1bGF0ZUNvbG9ycyIsInBpY2tpbmdDb2xvcnMiLCJjYWxjdWxhdGVQaWNraW5nQ29sb3JzIiwib2xkUHJvcHMiLCJjaGFuZ2VGbGFncyIsImludmFsaWRhdGVBbGwiLCJwcm9qZWN0aW9uTW9kZSIsIkxOR0xBVCIsInBvc2l0aW9uczY0eHlMb3ciLCJjYWxjdWxhdGVQb3NpdGlvbnNMb3ciLCJyZW1vdmUiLCJ1bmlmb3JtcyIsInJlbmRlciIsIk9iamVjdCIsImFzc2lnbiIsInJlZ2VuZXJhdGVNb2RlbCIsInVwZGF0ZUdlb21ldHJ5IiwidXBkYXRlQXR0cmlidXRlIiwiZ2VvbWV0cnlDb25maWdDaGFuZ2VkIiwiZGF0YUNoYW5nZWQiLCJwb2x5Z29ucyIsImRhdGEiLCJtYXAiLCJwb2x5Z29uVGVzc2VsYXRvciIsImdldEhlaWdodCIsInBvbHlnb25JbmRleCIsInNoYWRlcnMiLCJnZXRTaGFkZXJzIiwiaWQiLCJnZW9tZXRyeSIsImRyYXdNb2RlIiwiTElORVMiLCJUUklBTkdMRVMiLCJ2ZXJ0ZXhDb3VudCIsImF0dHJpYnV0ZSIsInZhbHVlIiwidGFyZ2V0IiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJzZXRWZXJ0ZXhDb3VudCIsImxlbmd0aCIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVFBLEtBQVIsUUFBb0IsY0FBcEI7QUFDQSxTQUFRQyxlQUFSLFFBQThCLHVCQUE5QjtBQUNBLFNBQVFDLEdBQVIsUUFBa0Isb0JBQWxCO0FBQ0EsU0FBUUMsRUFBUixFQUFZQyxLQUFaLEVBQW1CQyxRQUFuQixRQUFrQyxTQUFsQztBQUNBLFNBQVFDLGtCQUFSLFFBQWlDLHlCQUFqQztBQUNBLFNBQVFDLGlCQUFSLFFBQWdDLGNBQWhDOztBQUVBO0FBQ0EsU0FBUUMsaUJBQVIsUUFBZ0Ms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V0FBS3JELEtBQUwsQ0FBV1IsS0FBWCxDQUFpQjhELGNBQWpCLENBQWdDSixVQUFVQyxLQUFWLENBQWdCSSxNQUFoQixHQUF5QkwsVUFBVTlDLElBQW5FO0FBQ0Q7Ozt1Q0FFa0I4QyxTLEVBQVc7QUFDNUJBLGdCQUFVQyxLQUFWLEdBQWtCLEtBQUtuRCxLQUFMLENBQVd1QyxpQkFBWCxDQUE2Qi9CLFNBQTdCLEdBQXlDQSxTQUEzRDtBQUNEOzs7MENBQ3FCMEMsUyxFQUFXO0FBQy9CQSxnQkFBVUMsS0FBVixHQUFrQixLQUFLbkQsS0FBTCxDQUFXdUMsaUJBQVgsQ0FBNkIvQixTQUE3QixHQUF5Q2dCLGdCQUEzRDtBQUNEOzs7cUNBQ2dCMEIsUyxFQUFXO0FBQzFCQSxnQkFBVUMsS0FBVixHQUFrQixLQUFLbkQsS0FBTCxDQUFXdUMsaUJBQVgsQ0FBNkI1QixPQUE3QixFQUFsQjtBQUNEOzs7b0NBRWV1QyxTLEVBQVc7QUFBQTs7QUFDekJBLGdCQUFVQyxLQUFWLEdBQWtCLEtBQUtuRCxLQUFMLENBQVd1QyxpQkFBWCxDQUE2QjFCLE1BQTdCLENBQW9DO0FBQ3BEdEMsa0JBQVU7QUFBQSxpQkFBZ0IsT0FBS1MsS0FBTCxDQUFXVCxRQUFYLENBQW9CLE9BQUtTLEtBQUwsQ0FBV3FELElBQVgsQ0FBZ0JJLFlBQWhCLENBQXBCLENBQWhCO0FBQUE7QUFEMEMsT0FBcEMsQ0FBbEI7QUFHRDs7QUFFRDs7OzsyQ0FDdUJTLFMsRUFBVztBQUNoQ0EsZ0JBQVVDLEtBQVYsR0FBa0IsS0FBS25ELEtBQUwsQ0FBV3VDLGlCQUFYLENBQTZCdEIsYUFBN0IsRUFBbEI7QUFDRDs7OztFQTlJNEM5RCxLOztlQUExQjRCLGlCOzs7QUFpSnJCQSxrQkFBa0J5RSxTQUFsQixHQUE4QixtQkFBOUI7QUFDQXpFLGtCQUFrQmYsWUFBbEIsR0FBaUNBLFlBQWpDIiwiZmlsZSI6InNvbGlkLXBvbHlnb24tbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtMYXllcn0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCB7YXNzZW1ibGVTaGFkZXJzfSBmcm9tICcuLi8uLi8uLi9zaGFkZXItdXRpbHMnO1xuaW1wb3J0IHtnZXR9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQge0dMLCBNb2RlbCwgR2VvbWV0cnl9IGZyb20gJ2x1bWEuZ2wnO1xuaW1wb3J0IHtlbmFibGU2NGJpdFN1cHBvcnR9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscy9mcDY0JztcbmltcG9ydCB7Q09PUkRJTkFURV9TWVNURU19IGZyb20gJy4uLy4uLy4uL2xpYic7XG5cbi8vIFBvbHlnb24gZ2VvbWV0cnkgZ2VuZXJhdGlvbiBpcyBtYW5hZ2VkIGJ5IHRoZSBwb2x5Z29uIHRlc3NlbGF0b3JcbmltcG9ydCB7UG9seWdvblRlc3NlbGF0b3J9IGZyb20gJy4vcG9seWdvbi10ZXNzZWxhdG9yJztcbmltcG9ydCB7UG9seWdvblRlc3NlbGF0b3JFeHRydWRlZH0gZnJvbSAnLi9wb2x5Z29uLXRlc3NlbGF0b3ItZXh0cnVkZWQnO1xuXG5pbXBvcnQgc29saWRQb2x5Z29uVmVydGV4IGZyb20gJy4vc29saWQtcG9seWdvbi1sYXllci12ZXJ0ZXguZ2xzbCc7XG5pbXBvcnQgc29saWRQb2x5Z29uVmVydGV4NjQgZnJvbSAnLi9zb2xpZC1wb2x5Z29uLWxheWVyLXZlcnRleC02NC5nbHNsJztcbmltcG9ydCBzb2xpZFBvbHlnb25GcmFnbWVudCBmcm9tICcuL3NvbGlkLXBvbHlnb24tbGF5ZXItZnJhZ21lbnQuZ2xzbCc7XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgLy8gV2hldGhlciB0byBleHRydWRlXG4gIGV4dHJ1ZGVkOiBmYWxzZSxcbiAgLy8gV2hldGhlciB0byBkcmF3IGEgR0wuTElORVMgd2lyZWZyYW1lIG9mIHRoZSBwb2x5Z29uXG4gIHdpcmVmcmFtZTogZmFsc2UsXG4gIGZwNjQ6IGZhbHNlLFxuXG4gIC8vIEFjY2Vzc29yIGZvciBwb2x5Z29uIGdlb21ldHJ5XG4gIGdldFBvbHlnb246IGYgPT4gZ2V0KGYsICdwb2x5Z29uJykgfHwgZ2V0KGYsICdnZW9tZXRyeS5jb29yZGluYXRlcycpLFxuICAvLyBBY2Nlc3NvciBmb3IgZXh0cnVzaW9uIGhlaWdodFxuICBnZXRFbGV2YXRpb246IGYgPT4gZ2V0KGYsICdlbGV2YXRpb24nKSB8fCBnZXQoZiwgJ3Byb3BlcnRpZXMuaGVpZ2h0JykgfHwgMCxcbiAgLy8gQWNjZXNzb3IgZm9yIGNvbG9yXG4gIGdldENvbG9yOiBmID0+IGdldChmLCAnY29sb3InKSB8fCBnZXQoZiwgJ3Byb3BlcnRpZXMuY29sb3InKSxcblxuICAvLyBPcHRpb25hbCBzZXR0aW5ncyBmb3IgJ2xpZ2h0aW5nJyBzaGFkZXIgbW9kdWxlXG4gIGxpZ2h0U2V0dGluZ3M6IHtcbiAgICBsaWdodHNQb3NpdGlvbjogWy0xMjIuNDUsIDM3Ljc1LCA4MDAwLCAtMTIyLjAsIDM4LjAwLCA1MDAwXSxcbiAgICBhbWJpZW50UmF0aW86IDAuMDUsXG4gICAgZGlmZnVzZVJhdGlvOiAwLjYsXG4gICAgc3BlY3VsYXJSYXRpbzogMC44LFxuICAgIGxpZ2h0c1N0cmVuZ3RoOiBbMi4wLCAwLjAsIDAuMCwgMC4wXSxcbiAgICBudW1iZXJPZkxpZ2h0czogMlxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb2xpZFBvbHlnb25MYXllciBleHRlbmRzIExheWVyIHtcbiAgZ2V0U2hhZGVycygpIHtcbiAgICByZXR1cm4gZW5hYmxlNjRiaXRTdXBwb3J0KHRoaXMucHJvcHMpID8ge1xuICAgICAgdnM6IHNvbGlkUG9seWdvblZlcnRleDY0LFxuICAgICAgZnM6IHNvbGlkUG9seWdvbkZyYWdtZW50LFxuICAgICAgbW9kdWxlczogWydmcDY0JywgJ3Byb2plY3Q2NCcsICdsaWdodGluZyddLFxuICAgICAgc2hhZGVyQ2FjaGU6IHRoaXMuY29udGV4dC5zaGFkZXJDYWNoZVxuICAgIH0gOiB7XG4gICAgICB2czogc29saWRQb2x5Z29uVmVydGV4LFxuICAgICAgZnM6IHNvbGlkUG9seWdvbkZyYWdtZW50LFxuICAgICAgbW9kdWxlczogWydsaWdodGluZyddLFxuICAgICAgc2hhZGVyQ2FjaGU6IHRoaXMuY29udGV4dC5zaGFkZXJDYWNoZVxuICAgIH07XG4gIH1cblxuICBpbml0aWFsaXplU3RhdGUoKSB7XG4gICAgY29uc3Qge2dsfSA9IHRoaXMuY29udGV4dDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1vZGVsOiB0aGlzLl9nZXRNb2RlbChnbCksXG4gICAgICBudW1JbnN0YW5jZXM6IDAsXG4gICAgICBJbmRleFR5cGU6IGdsLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpID8gVWludDMyQXJyYXkgOiBVaW50MTZBcnJheVxuICAgIH0pO1xuXG4gICAgY29uc3Qge2F0dHJpYnV0ZU1hbmFnZXJ9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBub0FsbG9jID0gdHJ1ZTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgYXR0cmlidXRlTWFuYWdlci5hZGQoe1xuICAgICAgaW5kaWNlczoge3NpemU6IDEsIGlzSW5kZXhlZDogdHJ1ZSwgdXBkYXRlOiB0aGlzLmNhbGN1bGF0ZUluZGljZXMsIG5vQWxsb2N9LFxuICAgICAgcG9zaXRpb25zOiB7c2l6ZTogMywgYWNjZXNzb3I6ICdnZXRFbGV2YXRpb24nLCB1cGRhdGU6IHRoaXMuY2FsY3VsYXRlUG9zaXRpb25zLCBub0FsbG9jfSxcbiAgICAgIG5vcm1hbHM6IHtzaXplOiAzLCB1cGRhdGU6IHRoaXMuY2FsY3VsYXRlTm9ybWFscywgbm9BbGxvY30sXG4gICAgICBjb2xvcnM6IHtzaXplOiA0LCB0eXBlOiBHTC5VTlNJR05FRF9CWVRFLCBhY2Nlc3NvcjogJ2dldENvbG9yJywgdXBkYXRlOiB0aGlzLmNhbGN1bGF0ZUNvbG9ycywgbm9BbGxvY30sXG4gICAgICBwaWNraW5nQ29sb3JzOiB7c2l6ZTogMywgdHlwZTogR0wuVU5TSUdORURfQllURSwgdXBkYXRlOiB0aGlzLmNhbGN1bGF0ZVBpY2tpbmdDb2xvcnMsIG5vQWxsb2N9XG4gICAgfSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG4gIH1cblxuICB1cGRhdGVBdHRyaWJ1dGUoe3Byb3BzLCBvbGRQcm9wcywgY2hhbmdlRmxhZ3N9KSB7XG4gICAgaWYgKHByb3BzLmZwNjQgIT09IG9sZFByb3BzLmZwNjQpIHtcbiAgICAgIGNvbnN0IHthdHRyaWJ1dGVNYW5hZ2VyfSA9IHRoaXMuc3RhdGU7XG4gICAgICBhdHRyaWJ1dGVNYW5hZ2VyLmludmFsaWRhdGVBbGwoKTtcblxuICAgICAgaWYgKHByb3BzLmZwNjQgJiYgcHJvcHMucHJvamVjdGlvbk1vZGUgPT09IENPT1JESU5BVEVfU1lTVEVNLkxOR0xBVCkge1xuICAgICAgICBhdHRyaWJ1dGVNYW5hZ2VyLmFkZCh7XG4gICAgICAgICAgcG9zaXRpb25zNjR4eUxvdzoge3NpemU6IDIsIHVwZGF0ZTogdGhpcy5jYWxjdWxhdGVQb3NpdGlvbnNMb3d9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0cmlidXRlTWFuYWdlci5yZW1vdmUoW1xuICAgICAgICAgICdwb3NpdGlvbnM2NHh5TG93J1xuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkcmF3KHt1bmlmb3Jtc30pIHtcbiAgICBjb25zdCB7ZXh0cnVkZWQsIGxpZ2h0U2V0dGluZ3N9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuc3RhdGUubW9kZWwucmVuZGVyKE9iamVjdC5hc3NpZ24oe30sIHVuaWZvcm1zLCB7XG4gICAgICBleHRydWRlZDogZXh0cnVkZWQgPyAxLjAgOiAwLjBcbiAgICB9LFxuICAgIGxpZ2h0U2V0dGluZ3MpKTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKHtwcm9wcywgb2xkUHJvcHMsIGNoYW5nZUZsYWdzfSkge1xuICAgIHN1cGVyLnVwZGF0ZVN0YXRlKHtwcm9wcywgb2xkUHJvcHMsIGNoYW5nZUZsYWdzfSk7XG5cbiAgICBjb25zdCByZWdlbmVyYXRlTW9kZWwgPSB0aGlzLnVwZGF0ZUdlb21ldHJ5KHtwcm9wcywgb2xkUHJvcHMsIGNoYW5nZUZsYWdzfSk7XG5cbiAgICBpZiAocmVnZW5lcmF0ZU1vZGVsKSB7XG4gICAgICBjb25zdCB7Z2x9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7bW9kZWw6IHRoaXMuX2dldE1vZGVsKGdsKX0pO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUF0dHJpYnV0ZSh7cHJvcHMsIG9sZFByb3BzLCBjaGFuZ2VGbGFnc30pO1xuICB9XG5cbiAgdXBkYXRlR2VvbWV0cnkoe3Byb3BzLCBvbGRQcm9wcywgY2hhbmdlRmxhZ3N9KSB7XG4gICAgY29uc3QgZ2VvbWV0cnlDb25maWdDaGFuZ2VkID0gcHJvcHMuZXh0cnVkZWQgIT09IG9sZFByb3BzLmV4dHJ1ZGVkIHx8XG4gICAgICBwcm9wcy53aXJlZnJhbWUgIT09IG9sZFByb3BzLndpcmVmcmFtZSB8fCBwcm9wcy5mcDY0ICE9PSBvbGRQcm9wcy5mcDY0O1xuXG4gICAgIC8vIFdoZW4gdGhlIGdlb21ldHJ5IGNvbmZpZyAgb3IgdGhlIGRhdGEgaXMgY2hhbmdlZCxcbiAgICAgLy8gdGVzc2VsbGF0b3IgbmVlZHMgdG8gYmUgaW52b2tlZFxuICAgIGlmIChjaGFuZ2VGbGFncy5kYXRhQ2hhbmdlZCB8fCBnZW9tZXRyeUNvbmZpZ0NoYW5nZWQpIHtcbiAgICAgIGNvbnN0IHtnZXRQb2x5Z29uLCBleHRydWRlZCwgd2lyZWZyYW1lLCBnZXRFbGV2YXRpb259ID0gcHJvcHM7XG5cbiAgICAgIC8vIFRPRE8gLSBhdm9pZCBjcmVhdGluZyBhIHRlbXBvcmFyeSBhcnJheSBoZXJlOiBsZXQgdGhlIHRlc3NlbGF0b3IgaXRlcmF0ZVxuICAgICAgY29uc3QgcG9seWdvbnMgPSBwcm9wcy5kYXRhLm1hcChnZXRQb2x5Z29uKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBvbHlnb25UZXNzZWxhdG9yOiAhZXh0cnVkZWQgP1xuICAgICAgICAgIG5ldyBQb2x5Z29uVGVzc2VsYXRvcih7cG9seWdvbnMsIGZwNjQ6IHRoaXMucHJvcHMuZnA2NH0pIDpcbiAgICAgICAgICBuZXcgUG9seWdvblRlc3NlbGF0b3JFeHRydWRlZCh7cG9seWdvbnMsIHdpcmVmcmFtZSxcbiAgICAgICAgICAgIGdldEhlaWdodDogcG9seWdvbkluZGV4ID0+IGdldEVsZXZhdGlvbih0aGlzLnByb3BzLmRhdGFbcG9seWdvbkluZGV4XSksXG4gICAgICAgICAgICBmcDY0OiB0aGlzLnByb3BzLmZwNjRcbiAgICAgICAgICB9KVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc3RhdGUuYXR0cmlidXRlTWFuYWdlci5pbnZhbGlkYXRlQWxsKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlb21ldHJ5Q29uZmlnQ2hhbmdlZDtcbiAgfVxuXG4gIF9nZXRNb2RlbChnbCkge1xuICAgIGNvbnN0IHNoYWRlcnMgPSBhc3NlbWJsZVNoYWRlcnMoZ2wsIHRoaXMuZ2V0U2hhZGVycygpKTtcblxuICAgIHJldHVybiBuZXcgTW9kZWwoe1xuICAgICAgZ2wsXG4gICAgICBpZDogdGhpcy5wcm9wcy5pZCxcbiAgICAgIHZzOiBzaGFkZXJzLnZzLFxuICAgICAgZnM6IHNoYWRlcnMuZnMsXG4gICAgICBnZW9tZXRyeTogbmV3IEdlb21ldHJ5KHtcbiAgICAgICAgZHJhd01vZGU6IHRoaXMucHJvcHMud2lyZWZyYW1lID8gR0wuTElORVMgOiBHTC5UUklBTkdMRVNcbiAgICAgIH0pLFxuICAgICAgdmVydGV4Q291bnQ6IDAsXG4gICAgICBpc0luZGV4ZWQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUluZGljZXMoYXR0cmlidXRlKSB7XG4gICAgYXR0cmlidXRlLnZhbHVlID0gdGhpcy5zdGF0ZS5wb2x5Z29uVGVzc2VsYXRvci5pbmRpY2VzKCk7XG4gICAgYXR0cmlidXRlLnRhcmdldCA9IEdMLkVMRU1FTlRfQVJSQVlfQlVGRkVSO1xuICAgIHRoaXMuc3RhdGUubW9kZWwuc2V0VmVydGV4Q291bnQoYXR0cmlidXRlLnZhbHVlLmxlbmd0aCAvIGF0dHJpYnV0ZS5zaXplKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVBvc2l0aW9ucyhhdHRyaWJ1dGUpIHtcbiAgICBhdHRyaWJ1dGUudmFsdWUgPSB0aGlzLnN0YXRlLnBvbHlnb25UZXNzZWxhdG9yLnBvc2l0aW9ucygpLnBvc2l0aW9ucztcbiAgfVxuICBjYWxjdWxhdGVQb3NpdGlvbnNMb3coYXR0cmlidXRlKSB7XG4gICAgYXR0cmlidXRlLnZhbHVlID0gdGhpcy5zdGF0ZS5wb2x5Z29uVGVzc2VsYXRvci5wb3NpdGlvbnMoKS5wb3NpdGlvbnM2NHh5TG93O1xuICB9XG4gIGNhbGN1bGF0ZU5vcm1hbHMoYXR0cmlidXRlKSB7XG4gICAgYXR0cmlidXRlLnZhbHVlID0gdGhpcy5zdGF0ZS5wb2x5Z29uVGVzc2VsYXRvci5ub3JtYWxzKCk7XG4gIH1cblxuICBjYWxjdWxhdGVDb2xvcnMoYXR0cmlidXRlKSB7XG4gICAgYXR0cmlidXRlLnZhbHVlID0gdGhpcy5zdGF0ZS5wb2x5Z29uVGVzc2VsYXRvci5jb2xvcnMoe1xuICAgICAgZ2V0Q29sb3I6IHBvbHlnb25JbmRleCA9PiB0aGlzLnByb3BzLmdldENvbG9yKHRoaXMucHJvcHMuZGF0YVtwb2x5Z29uSW5kZXhdKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgcGlja2luZyBjb2xvcnMgY2FsY3VsYXRpb25cbiAgY2FsY3VsYXRlUGlja2luZ0NvbG9ycyhhdHRyaWJ1dGUpIHtcbiAgICBhdHRyaWJ1dGUudmFsdWUgPSB0aGlzLnN0YXRlLnBvbHlnb25UZXNzZWxhdG9yLnBpY2tpbmdDb2xvcnMoKTtcbiAgfVxufVxuXG5Tb2xpZFBvbHlnb25MYXllci5sYXllck5hbWUgPSAnU29saWRQb2x5Z29uTGF5ZXInO1xuU29saWRQb2x5Z29uTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19